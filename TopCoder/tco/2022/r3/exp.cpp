#include <cstdio>
#include <string>
#include <cstring>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

char s[110][110];
int d[110][110];
int k;

int dirs[][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

/*
9: 14 16 16 16 16 16 16 18 18 18 18 18 18 20 20 20 22 22 22 22 22 22 24 24 24	9: 20 22 22 22 22 22 24 24 26 26 26 26 26 26 28 28 28 28 28 28 30 30 30 30 30
11: 20 22 24 26 26 26 26 28 28 28 30 30 30 32 34	11: 30 32 34 36 36 36 36 38 38 38 40 40 40 40 40 42 44 46 48
13: 26 26 26 26 28 28 32 32 34 34 34 34 34 34 34 34 36 36 36 38 42 42 48	13: 42 46 48 48 50 50 50 52 54 54 54 56 56 56 58 58 58 58 60 60 60 62 62 66
15: 34 34 34 36 36 40 40 42 42 42 46 46 46 48 48 48 48 50 50 52	15: 56 58 60 68 68 68 70 70 72 76 78 78 78 78 80 82 82 84 84
17: 38 40 40 40 42 44 44 44 46 46 46 48 48 48 48 52 52 54 54 54 56 56 60 60 60 70	17: 76 76 78 78 82 84 84 84 84 84 86 86 86 88 88 92 92 92 94 94 96 98 98 98 100 102 102 104 112 112
19: 46 46 46 50 52 54 54 54 56 56 60 60 60 62 62 64 64 66 68 70 80	19: 92 94 100 102 108 108 116 122 124 128 134 144
21: 52 52 54 54 56 58 58 58 60 60 62 62 62 64 66 66 68 72 72 74 76 78 84 86	21: 106 114 114 118 124 128 128 128 132 138 156 158 160
23: 62 64 64 64 68 70 72 72 74 74 76 76 78 80 82 84 84 86 92 100	23: 130 136 144 146 146 152 152 154 154 156 162 162 170 174 176 188 194
25: 58 58 70 72 74 74 78 78 80 82 82 86 86 86 88 88 88 90 92 94 94 104 108 108	25: 156 162 166 168 170 176 178 182 186 194 196 200 204 206 208 208 216 216 216 216 226 226 238
27: 70 70 80 82 86 86 86 88 88 90 90 92 92 96 98 100 102 104 104 108 112 112 114	27: 152 172 202 204 208 226 226 228 232 236 238 238 242 242 258
29: 78 82 88 92 92 94 98 98 100 100 102 106 108 110 110 112 112 112 114 114 116 122 126 130 136 142	29: 190 204 210 212 216 216 220 226 228 232 234 238 240 240 244 246 246 250 254 258 260 266 280 300
31: 84 88 92 92 100 104 106 108 108 110 110 110 112 112 116 126 126 162	31: 218 232 232 236 238 246 252 268 270 270 276 276 280 288 290 292 294 294 304 320 322 324 338
33: 100 100 102 110 116 118 118 120 122 122 130 140 144 150 152 156 164 178	33: 266 272 276 288 290 292 298 300 308 316 328 348 356
35: 100 102 110 112 112 116 124 128 130 142 146 148 166	35: 278 278 296 316 334 334 354 362 364 368 370 372 390 402 444
37: 116 122 128 132 144 144 146 146 146 146 148 150 150 154 154 158 164 170 180 180 182 188	37: 320 322 326 358 372 376 386 386 394 398 398 402 424 436 440 444 456 460
39: 130 132 134 134 140 140 142 150 156 176 182 182 212	39: 324 324 344 354 354 360 394 396 400 402 406 408 412 412 414 416 424 444 444 448 450 472 474 512
41: 136 136 138 138 140 144 146 150 152 158 158 164 164 170 170 170 174 182 186 188 188 190 234 236	41: 356 364 368 382 384 396 414 420 424 440 448 472 474 476 476 482 482 498 500 502 504 508 510 514 552
43: 138 154 160 164 168 168 172 172 174 174 184 188 196 198 200 218 222	43: 392 406 424 470 472 476 482 488 490 492 494 498 516 532 538 538 552 556 562 588 592 600
45: 162 164 166 172 174 174 176 176 182 184 186 186 188 210 214 218 232 262	45: 408 408 440 442 456 460 494 500 502 504 504 512 528 542 560 560 570 580 582 676
47: 164 166 166 176 180 184 186 188 188 192 194 194 196 196 198 200 202 206 212 212 212 216 218 232	47: 418 492 516 518 530 540 560 570 570 584 586 588 608 620 628 642 662 662 668 668 668 680 686 698 746
49: 138 154 168 174 174 174 176 180 180 184 188 192 194 196 208 212 212 214 214 218 224 228 232 236 240 240 258	49: 472 474 478 546 548 562 570 580 580 594 612 620 628 628 630 640 644 654 662 670 672 706 726 726 760
51: 192 196 200 202 208 210 220 220 232 234 250 266 280 302	51: 498 558 582 604 610 620 622 642 646 654 656 656 684 688 706 708 712 732 736 756 778
53: 180 194 198 200 202 220 222 226 232 234 242 246 248 254 270 272 276	53: 568 638 678 706 708 722 734 748 750 754 798 806 806 808 846 858 864 884
55: 186 192 194 194 204 210 212 212 216 218 224 226 234 246 246 250 250 252 254 254 254 266 274 294 306 324	55: 664 684 704 710 720 722 726 728 736 744 760 772 782 784 806 806 836 866 888 892 922 926 936 968
57: 206 210 214 216 218 222 240 244 246 248 256 262 268 276 286 296 300 312	57: 734 752 770 786 790 806 810 812 814 818 826 826 842 848 852 880 892 898 904 912 958 1008
59: 194 198 206 212 214 218 220 222 222 226 234 242 244 248 258 260 264 270 272 288 320	59: 656 766 782 784 790 790 794 800 828 836 848 856 876 896 900 914 928 930 932 940 948 962 1016 1024 1034 1050 1066 1138
61: 224 232 236 238 240 246 250 256 260 260 262 262 266 274 286 314 316 320 326 352	61: 736 800 802 858 882 882 890 896 900 902 904 918 918 918 938 970 980 988 996 1002 1048 1110
63: 206 206 208 214 228 232 234 246 246 248 252 254 258 258 310 322 346 352	63: 830 864 874 892 940 940 942 962 984 1002 1022 1046 1056 1058 1074 1098 1144
65: 228 236 240 244 248 256 268 272 278 282 286 302 304 304 306 312 316 320 328 338 346 378	65: 772 886 910 926 950 998 1014 1044 1056 1066 1090 1120 1210
67: 210 236 254 266 266 272 280 282 292 294 306 308 320 330 334 336 342 368 392	67: 742 834 878 926 952 972 1022 1024 1034 1042 1068 1106 1132 1152 1166 1236 1280 1318 1390
69: 244 248 264 274 290 294 300 306 310 312 332 332 348 356 362 420 440	69: 972 1032 1076 1090 1118 1126 1130 1132 1150 1154 1156 1162 1174 1186 1188 1190 1192 1214 1242 1262 1280 1424 1516
71: 232 254 276 276 280 286 288 288 304 304 310 312 314 324 346 350 356 358 358 366 372	71: 1006 1010 1016 1044 1060 1072 1086 1112 1140 1146 1154 1180 1190 1190 1190 1234 1244 1250 1264 1312 1338 1344 1348 1376 1426 1538
73: 258 266 282 284 288 288 290 292 324 326 330 340 368 416 436 448 450	73: 1120 1124 1142 1212 1222 1228 1238 1252 1266 1298 1316 1334 1352 1362 1374 1384 1406 1422 1444 1488 1580
75: 274 290 290 292 308 314 322 330 334 340 360 366 370 396 406 408 408 420 442 468	75: 984 1100 1138 1236 1304 1316 1340 1346 1352 1356 1372 1384 1410 1442 1448 1570 1600
77: 266 282 302 310 312 314 316 318 318 320 324 324 336 342 344 344 348 352 356 356 366 372 376 376 380 386 390 392 412 426 428 432 440 442 460 462	77: 1086 1128 1138 1222 1272 1324 1356 1394 1402 1446 1490 1512 1546 1588 1596 1710 1790
79: 278 286 288 322 324 330 334 334 336 372 380 410 412 412 414 418 420 430 466 484 518 528	79: 1200 1268 1280 1320 1362 1408 1420 1428 1436 1450 1466 1480 1482 1496 1516 1528 1556 1570 1570 1658 1664 1674 1686 1850
81: 322 330 340 348 350 352 354 362 370 374 378 382 388 388 400 400 400 402 402 406 412 412 412 416 422 430 458 482 500 504	81: 1076 1174 1234 1358 1368 1398 1422 1462 1512 1530 1536 1548 1584 1622 1640 1670 1710 1790
83: 346 352 366 372 372 378 380 398 410 412 414 418 418 418 426 432 434 436 440 444 464 474 522 522	83: 1196 1304 1320 1360 1368 1400 1480 1486 1506 1536 1576 1588 1592 1604 1620 1630 1630 1662 1664 1682 1760 1762 1798 1916 1982
85: 314 318 320 334 346 352 354 354 358 358 360 360 364 376 376 382 382 388 390 406 416 418 428 432 438 442 456 458 472 478 488 538 550	85: 1330 1428 1464 1480 1500 1510 1538 1552 1568 1588 1594 1596 1616 1670 1728 1746 1746 1806 1874 1910 1910 2052
87: 322 352 362 364 366 376 380 382 392 394 402 416 418 428 432 442 454 466 470 520 524 532	87: 1310 1404 1410 1448 1514 1514 1562 1570 1622 1624 1634 1644 1650 1660 1688 1688 1720 1734 1816 1840 1852 1942 1962 1986 2082 2120
89: 328 354 366 376 398 410 416 418 424 434 436 446 450 454 454 460 472 476 478 492 508 538	89: 1538 1588 1632 1654 1662 1666 1672 1682 1768 1772 1800 1838 1886 1968 1998 2022 2104 2156 2184 2272
91: 346 346 346 360 372 378 390 392 392 392 404 410 412 434 456 460 462 466 470 482 486 502 518 542 582	91: 1568 1614 1686 1692 1694 1708 1734 1766 1770 1800 1804 1826 1846 1846 1852 1870 1888 1892 1898 1988 2016 2018 2052 2098 2128 2140
93: 402 434 436 442 466 474 480 484 484 494 502 518 528 548 552 554 576	93: 1464 1548 1554 1564 1634 1656 1726 1834 1836 1844 1858 1874 1948 1984 2004 2030 2038 2078 2148 2152 2168 2184 2208 2228 2348 2408 2434
95: 354 358 364 382 398 408 410 410 414 438 438 450 478 480 488 520 526 526	95: 1690 1822 1904 1980 1988 2022 2028 2038 2098 2114 2120 2124 2178 2180 2218 2236 2322 2390 2454 2458
97: 374 386 394 402 406 422 432 438 446 466 474 506 508 508 514 518 548 554 584 622 664	97: 1602 1648 1758 1760 1864 1896 1920 1930 1972 2006 2008 2012 2080 2094 2198 2356 2424 2436 2480 2524 2708
99: 364 366 382 396 404 410 418 426 432 434 440 446 454 484 486 494 514 522 544 556 670	99: 1758 1782 1788 1832 1890 1918 1968 1976 2058 2088 2172 2194 2224 2240 2262 2380 2452 2502 2548 2628 2684 2712
101: 392 408 424 430 464 478 506 522 534 536 544 568 586 594 608 618 618 622	101: 1742 1780 1944 1958 2072 2074 2080 2104 2110 2180 2206 2208 2212 2214 2244 2268 2280 2284 2310 2330 2370 2390 2424 2438 2458 2468 2472 2610 2686 2836
 */

const int treshold[] = {
  23,
  32,
  45,
  54,
  73,
  86,
  96,
  115,
  132,
  133,
  166,
  190,
  222,
  222,
  254,
  268,
  296,
  307,
  335,
  325,
  365,
  400,
  422,
  494,
  523,
  488,
  544,
  591,
  575,
  567,
  706,
  689,
  785,
  726,
  774,
  864,
  790,
  859,
  940,
  921,
  1038,
  1075,
  1020,
  1108,
  1133,
  1214,
  1182,

};


void dfs(int x, int y, int l) {
  d[x][y] = l;
  for (auto [dx, dy] : dirs) {
    int nx = x + dx;
    int ny = y + dy;
    if (nx >= 0 && ny >= 0 && nx < k && ny < k) {
      if (s[nx][ny] == '.' && d[nx][ny] == -1) {
        dfs(nx, ny, l + 1);
      }
    }
  }
}

map<int, vector<int>> rats;

char solve() {
  scanf("%d", &k);
  int t = treshold[k - 4];
  k = 2 * k + 1;
  for (int i = 0; i < k; i++) {
    scanf("%s", s[i]);
  }
  memset(d, -1, sizeof(d));
  int x = 1, y = 1;
  for (int it = 0; it < 2; it++) {
    memset(d, -1, sizeof(d));
    dfs(x, y, 0);
    for (int i = 0; i < k; i++) {
      for (int j = 0; j < k; j++) {
        if (s[i][j] != '#') {
          if (d[i][j] > d[x][y]) {
            x = i;
            y = j;
          }
        }
      }
    }
  }
  rats[k].push_back(d[x][y]);
  printf("%d %.5lf\n", k, d[x][y] * 1.0 / k / k);
  return (d[x][y] < t) ? 'M' : 'D';
}

int main() {
  int t;
  scanf("%d", &t);
  string ans = "";
  while (t-->0) {
    ans += solve();
  }
  fprintf(stderr, "%s\n", ans.c_str());
  for (auto [i, l] : rats) {
    printf("%d:", i);
    sort(l.begin(), l.end());
    for (int x : l) {
      printf(" %d", x);
    }
    printf("\n");
  }
}

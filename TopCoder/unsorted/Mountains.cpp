#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;


class Mountains {

vector<int> h;
vector<string> g;
int n,m;
vector<int> y;



int go(int pos){
	if (pos == n)
		return 1;
	if (g[pos].find('X') == string::npos){
		int cnt = 0;
		for (int j = 0; j < m; j++)
			cnt += (h[j] >= y[pos]);
		if (!cnt) return 0;
		return cnt * go(pos+1);
	}
	int ans = 0;
	for (int i = 0; i < m; i++){
		if (g[pos][i] == 'X'){
			bool ok = true;
			for (int j = 0; j < m && ok; j++)
				ok &= (g[pos][j] == 'X') ^ (y[i] - abs(i - j) <= h[i]);
			if (ok){
				cerr <<"!!!"<<pos <<" "<<i << endl;
				vector<int> temp = h;
				for (int j = 0; j < m; j++)
					h[i] = max(h[i],y[i] - abs(i-j));
				ans += go(pos+1);
				h = temp;
			}
		}
	}
	return ans;
}

public:
    int countPlacements(vector <int> _y, vector <string>_g) {
        y = _y;
        g = _g;
        n = y.size();
        m = g[0].size();
        reverse(y.begin(),y.end());
        reverse(g.begin(),g.end());
        h = vector<int>(n,0);
        return go(0);        
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Mountains *obj;
	int answer;
	obj = new Mountains();
	clock_t startTime = clock();
	answer = obj->countPlacements(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {2,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"------","XXXX--","---XXX"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {4,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"XXXXX--------","----------XXX","----XXXXXXX--"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {13,2,3,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"XXXXXXXXX","-XXX-----","----XXXXX","-----XXX-"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 9;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {8,2,9,3,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"X------","-------","------X","-------","XXXXXXX"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 98;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {20,20,20,20,20,20,45,50,49,50};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"-------------------","-------------------","-------------------","-------------------","-------------------","-------------------","-------------------","------------XXXXXXX","XXXXXXX------------","XXXXXXXXXXXXXXXXXXX"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 973726691;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;


class XorCards {

ll calc(vector<ll> bits, ll limit){
	sort(bits.begin(), bits.end(),greater<ll>());
	int ptr = 0;
	ll ans = 0;
	ll curv = 0;
	for (int i = 60; i >= 0; i--){
		bool lim = bool(limit & (1LL<<i));
		bool cur = bool(curv & (1LL<<i));
		bool have = bool(ptr != (int)bits.size() && (bits[ptr] & (1LL<<i)));
		//cerr << lim <<" "<< cur <<" "<< have << " "<<ans<<endl;
/*		if (lim == (cur ^ have)){
			if (lim == 1 && have) ans += (1LL << ((int)bits.size() - ptr - have)); // not take
			if (have) curv ^= bits[ptr++]; // take
		}
		else {
			if (lim == 1 && have) ans += (1LL << ((int)bits.size() - ptr - have)); // take
			if (have) ptr++;
		}*/
		if (lim != cur){
			if (lim == 1) ans += (1LL << ((int)bits.size() - ptr - have));
			if (!have) return ans;
			curv ^= bits[ptr++];
			continue;
		} 
		if (!have) continue;
		if (lim == 1) ans += (1LL << ((int)bits.size() - ptr - have));
		ptr++;
	}
	return ans+1;
}

public:
    ll numberOfWays(vector<ll> a, ll limit) {
    	vector<ll> bits;
        for (int i = 0; i < (int)a.size(); i++){
            {
        	int tmp = max_element(a.begin() + i, a.end()) - a.begin();
        	swap(a[i],a[tmp]);
        	}
        	if (a[i] == 0) return (1LL<< ((int)a.size() - i)) * calc(bits, limit);
			ll tmp = 1LL<<60;
			while (!(a[i] & tmp))
				tmp >>= 1;
			//cerr << a[i] << endl;
			bits.pb(a[i]);
			for (int j = i+1; j < (int)a.size(); j++)
				if (a[j] & tmp)
					a[j] ^= a[i];
        }
        return calc(bits,limit);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<ll> p0, ll p1, bool hasAnswer, ll p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	XorCards *obj;
	ll answer;
	obj = new XorCards();
	clock_t startTime = clock();
	answer = obj->numberOfWays(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector<ll> p0;
	ll p1;
	ll p2;
	
	{
	// ----- test 0 -----
	ll t0[] = {1ll,2ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2ll;
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	ll t0[] = {5ll,5ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3ll;
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	ll t0[] = {1ll,2ll,3ll,4ll,5ll,6ll,7ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5ll;
	p2 = 96ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	ll t0[] = {123ll,456ll,789ll,147ll,258ll,369ll,159ll,357ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 500ll;
	p2 = 125ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	ll t0[] = {0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000000000000000ll;
	p2 = 4294967296ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	ll t0[] = {1000000000000000ll,999999999999999ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 65535ll;
	p2 = 2ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include "memory.h"
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MOD = 1000000007;

const int dx[4] = {1,0,-1,0};
const int dy[4] = {0,-1,0,1};

class SplittingFoxes {

int a[13][13];
int b[13][13];
int temp[13][13];

void mult(int a[][13],int b[][13],int to[][13]){
	for (int i = 0; i < 13; i++)
		for (int j = 0; j < 13; j++)
			to[i][j] = 0;
	for (int i = 0; i < 13; i++)
		for (int j = 0; j < 13; j++)
			for (int k = 0; k < 13; k++)
				to[i][j] = (to[i][j] + a[i][k] * 1LL * b[k][j]) % MOD;
}



public:
	int sum(long long n, int S, int L, int R) {
		
		for (int i = 0; i < 13; i++)
			for (int j = 0; j < 13; j++)
				b[i][j] = 0;
		b[12][12] = R+L+S;
		
		for (int i = 0; i < 4; i++){
			b[i][i] = S;
			b[i][(i+1)%4] = R;
			b[i][(i+3)%4] = L;
			b[i][i+4] = dy[i]*S;
			b[i][i+8] = dx[i]*S;
		}
		
		for (int i = 0; i < 4; i++){
			b[i+4][i+4] = S;
			b[i+4][(i+1)%4+4] = R;
			b[i+4][(i+3)%4+4] = L;
			b[i+4][12] = S*dx[i];
		}
		
		
		for (int i = 0; i < 4; i++){
			b[i+8][i+8] = S;
			b[i+8][(i+1)%4+8] = R;
			b[i+8][(i+3)%4+8] = L;
			b[i+8][12] = S*dy[i];
		}
		
	
		/*for (int i = 0; i < 13; i++){
			cout<<endl<<i<<": ";
			for (int j = 0; j < 13; j++)
				printf("% 3d",b[i][j]);
		}*/		
				
		for (int i = 0; i <13; i++)
			for (int j = 0; j < 13; j++){
				a[i][j] = (i==j);
				b[i][j] = (b[i][j] + MOD)%MOD;			
			}
			
		n++;
			
		for (int i = 0; i <= 62; i++){
			if (n & (1LL<<i)){
				mult(a,b,temp);
				memcpy(a,temp,sizeof(a));
			}
			mult(b,b,temp);
			memcpy(b,temp,sizeof(b));
		}
		
		/*for (int i = 0; i < 13; i++){
			cout<<endl<<i<<": ";
			for (int j = 0; j < 13; j++)
				printf("% 3d",a[i][j]);
			cout << a[i][12] << endl;
		}*/		
		
		return a[0][12];		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	SplittingFoxes *obj;
	int answer;
	obj = new SplittingFoxes();
	clock_t startTime = clock();
	answer = obj->sum(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 58ll;
	p1 = 2;
	p2 = 0;
	p3 = 0;
	p4 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3ll;
	p1 = 1;
	p2 = 1;
	p3 = 0;
	p4 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5ll;
	p1 = 1;
	p2 = 3;
	p3 = 2;
	p4 = 34;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5ll;
	p1 = 1;
	p2 = 2;
	p3 = 3;
	p4 = 999999973;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 123456789ll;
	p1 = 987654321;
	p2 = 544;
	p3 = 544;
	p4 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 65536ll;
	p1 = 1024;
	p2 = 512;
	p3 = 4096;
	p4 = 371473914;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 5ll;
	p1 = 1;
	p2 = 1;
	p3 = 0;
	p4 = 34;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

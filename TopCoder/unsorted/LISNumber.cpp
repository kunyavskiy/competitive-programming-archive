#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int MOD = 1000000007;

void ADD(int& a,int b){
	if ((a += b) >= MOD) a -= MOD;
}


class LISNumber {
int c[1500][40];
int dp[2][1300];

int cnk(int n,int k){
	return c[n][k];
}

int cntr(int n,int k){
	return c[n+k-1][k];
}

ll getcnt(int tot,int n,int nv, int nnv){
//    fprintf(stderr, "%d %d %d %d -> %d\n",tot,n,nv,nnv, (int)((cnk(n,nv) * 1LL * cntr(tot + nv - (n - nv), nnv)) % MOD));
	return (cnk(n,nv) * 1LL * cntr(tot - (n - nv)+1, nnv)) % MOD;
}
 
public:
    int count(vector <int> v, int k) {
        c[0][0] = 1;
        for (int i = 0; i < 1500; i++)
        	for (int j = 0; j < 40; j++){
        		if (i) ADD(c[i][j], c[i-1][j]);
        		if (i && j) ADD(c[i][j], c[i-1][j-1]);
        	}
        int sum = v[0];
        dp[1][v[0]] = 1;
        for (int i = 1; i < (int)v.size(); i++){
        	for (int j = 0; j <= sum; j++)
        		dp[0][j] = dp[1][j], dp[1][j] = 0;
        	for (int j = 0; j <= sum; j++)
        		for (int k = 0; k <= v[i] && k <= j; k++)
        			if (dp[0][j])
          			    ADD(dp[1][j + v[i] - k], (int)((dp[0][j] * 1LL * getcnt(sum,j,k,v[i] - k)) % MOD));
        	sum += v[i];
//        	for (int j = 0; j <= sum; j++)
 //       		cerr << dp[1][j] <<" ";
   //         cerr << endl;
        }
        
        		
        return dp[1][k];		
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	LISNumber *obj;
	int answer;
	obj = new LISNumber();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {36,36,36,36,36};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {3,2,11,5,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20;
	p2 = 474640725;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {31,4,15,9,26,5,35,8,9,7,9,32,3,8,4,6,26};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 58;
	p2 = 12133719;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {27,18,28,18,28,4,5,9,4,5,23,5,36,28,7,4,7,13,5,26,6,24,9,7,7,5,7,24,7,9,36,9,9,9,5,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 116;
	p2 = 516440918;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


class NarrowPassage {

int solve3(int L, vector< pair<int, int> > a){
	int res = 0;
	sort(a.begin(), a.end());
	int first = (int)a.size();
	int best = L+1;
	for (int i = (int)a.size()-1; i >= 0; i--) {
		if (a[i].second > best) first = i;
		best = min(best, a[i].second);
	}
    for (int i = first; i < (int)a.size(); i++)
    	res += L - a[i].first, a[i].first = L;
	sort(a.begin(), a.end());
	for (int i = 0; i < (int)a.size(); i++){
		if (i && a[i-1].second > a[i].second) assert(false);
		res += abs(a[i].first - a[i].second);
	}
	return res;
}

int solve2(int L, vector<pair<int, int> > a) {
    sort(a.begin(), a.end());
	int res = solve3(L, a);
	int tot = 0;
	for (int i = 0; i < (int)a.size(); i++){
		tot += a[i].first;
		a[i].first = 0;
		res = min(res, solve3(L, a) + tot);
	}
	return res;
	
}

int solve(int L, vector<pair<int, int>> a){
    sort(a.begin(), a.end());
	int res = solve2(L, a);
	int tot = 0;
	for (int i = (int)a.size() - 1; i >= 0; i--){
		tot += L - a[i].first;
		a[i].first = L;
		res = min(res, solve2(L, a) + tot);
	}
	return res;
}

public:
    int minDist(int L, vector <int> a, vector <int> b) {
    	int n = a.size();
    	vector<pair<int, int> > v(n);
    	for (int i = 0; i < n; i++)
    		v[i] = mp(a[i], b[i]);
    	sort(v.begin(), v.end());
    	int res = 1<<30;
        for (int step = 0; step < 2; step++){
        	res = min(res, solve(L, v));
        	for (auto& x : v) x = mp(L - x.first, L - x.second);
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	NarrowPassage *obj;
	int answer;
	obj = new NarrowPassage();
	clock_t startTime = clock();
	answer = obj->minDist(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 5;
	p1 = {1,2};
	p2 = {3,4};
	p3 = 4;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 10;
	p1 = {3,9};
	p2 = {8,6};
	p3 = 14;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 265467;
	p1 = {133548,103861,29821,199848,92684,219824,215859,62821,172409,109235,38563,148854,24742,174068,205005,75922,87316,5542,57484,40792,25229,152216,21547,22203,84712,231522,235703,184895,100787,174440,156904,84898,185568,108732,260098,89488,221604,104555,165775,90444,81952,149671,209674,22185,45420,41928,16098,65324,90870,35243};
	p2 = {150289,135139,69841,227226,177427,230314,199175,81572,220468,151049,40009,145963,115246,252932,263651,38434,120096,69576,29789,115046,33310,260771,5723,80733,107864,142447,235490,242149,124564,134602,245962,7078,215816,219864,190499,210237,212894,142760,126472,201935,119308,120211,235235,19446,87314,17286,61990,102050,261812,257};
	p3 = 7148670;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 1000000;
	p1 = {706292,756214,490048,228791,567805,353900,640393,562496,217533,934149,938644,127480,777134,999144,41485,544051,417987,767415,971662,959022,670563,34065,518183,750574,546576,207758,159932,429345,670513,271901,476062,392721,774733,502586,915436,120280,951729,699859,581770,268966,79392,888601,378829,350198,939459,644983,605862,721305,269232,137587};
	p2 = {322468,673534,83223,551733,341310,485064,885415,927526,159402,28144,441619,305530,883149,413745,932694,214862,677401,104356,836580,300580,409942,748444,744205,119051,999286,462508,984346,887773,856655,245559,418763,840266,999775,962927,779570,488394,760591,326325,206948,13999,285467,401562,786209,169847,171326,2901,296531,572035,364920,939046};
	p3 = 45670501;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

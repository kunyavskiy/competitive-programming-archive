#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


const int MAXN = 2100000;
const int MOD = 1000000007;

class WolfDelaymasterHard {

int dp[MAXN];
int nextw[MAXN];
int nexto[MAXN];


public:
    int countWords(int n, int wlen, int w0, int wmul, int wadd, int olen, int o0, int omul, int oadd) {
        vector<char> s(n, '?');
        ll x = w0;
        for (int i = 0; i < wlen; i++){
            s[x] = 'w';
            x = (x * wmul + wadd) % n;
        }

        x = o0;
        for (int i = 0; i < olen; i++){
            s[x] = 'o';
            x = (x * omul + oadd) % n;
        }
        
        cerr << string(s.begin(), s.end()) << endl;

        nexto[n-1] = nextw[n-1] = n;
		for (int i = n-2; i >= 0; i--){
		    nexto[i] = nexto[i+1];
		    if (s[i] == 'o') nexto[i] = i;
		    nextw[i] = nextw[i+1];
		    if (s[i] == 'w') nextw[i] = i;
		}
		

        dp[n] = 1;
        for (int i = n-2; i >= 0; i -= 2){
        	for (int cnt = 1; i + cnt <= nexto[i] && i + 2*cnt <= n; cnt++){
        		if (nextw[i+cnt] < i + 2*cnt) continue;
        		eprintf("%d <- %d [%d]\n", i, i+2*cnt, nextw[i+cnt]);
        		dp[i] = (dp[i] + dp[i+2*cnt]) % MOD;
        	} 
        	cerr << dp[i] << endl;
        }
        
		return dp[0];
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, bool hasAnswer, int p9) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5 << "," << p6 << "," << p7 << "," << p8;
	cout << "]" << endl;
	WolfDelaymasterHard *obj;
	int answer;
	obj = new WolfDelaymasterHard();
	clock_t startTime = clock();
	answer = obj->countWords(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p9 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p9;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	int p7;
	int p8;
	int p9;
	
	{
	// ----- test 0 -----
	p0 = 8;
	p1 = 5;
	p2 = 2;
	p3 = 3;
	p4 = 2;
	p5 = 0;
	p6 = 6;
	p7 = 7;
	p8 = 1;
	p9 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 20;
	p1 = 19;
	p2 = 12;
	p3 = 9;
	p4 = 15;
	p5 = 1;
	p6 = 8;
	p7 = 11;
	p8 = 1;
	p9 = 26;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 40;
	p1 = 24;
	p2 = 34;
	p3 = 5;
	p4 = 11;
	p5 = 33;
	p6 = 35;
	p7 = 23;
	p8 = 27;
	p9 = 296;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 60;
	p1 = 35;
	p2 = 8;
	p3 = 55;
	p4 = 3;
	p5 = 11;
	p6 = 20;
	p7 = 9;
	p8 = 29;
	p9 = 10058904;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 2000;
	p1 = 183;
	p2 = 994;
	p3 = 862;
	p4 = 468;
	p5 = 148;
	p6 = 433;
	p7 = 1247;
	p8 = 1989;
	p9 = 532199331;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 2000000;
	p1 = 419443;
	p2 = 1305303;
	p3 = 1761823;
	p4 = 1007025;
	p5 = 874640;
	p6 = 1516339;
	p7 = 229519;
	p8 = 1473199;
	p9 = 861766906;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 8;
	p1 = 6;
	p2 = 0;
	p3 = 1;
	p4 = 1;
	p5 = 3;
	p6 = 3;
	p7 = 6;
	p8 = 1;
	p9 = 0;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

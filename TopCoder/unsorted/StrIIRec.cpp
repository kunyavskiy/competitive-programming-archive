#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class StrIIRec {

bool used[26];

bool bad(string s,string t){
	for (int i = 0; i < (int)s.size(); i++)
		for (int j = i+1; j < (int)s.size(); j++)
			if (s[i] == s[j])
				return true;
	for (int i = 0; i < (int)s.size() && i < (int)t.size(); i++)
		if (s[i] < t[i])
			return true;
		else if (s[i] > t[i])
			return false;
	return false;
}

int calc(string s){
	int n = s.size();
	int ans = 0;
	for (int i = 0; i < n; i++)
		for (int j = i+1; j < n; j++)
			ans += (s[i] > s[j]);
	return ans;
}

int calcmax(int n,string s){
	for (int i = 0; i < n; i++)
		used[i] = false;
	for (int i = 0; i < (int)s.size(); i++)
		used[s[i]-'a'] = true;
	for (int i = n-1; i >= 0; i--)
		if (!used[i])
			s += char(i+'a');
	return calc(s);
}

public:
	string recovstr(int n, int minInv, string minStr) {
		string res = "";
		
		//if (calc(minStr) >= minInv)
		//	return minStr;
		
		for (int i = 0; i < n ;i++){
			//cerr << "!"<<res << endl;
			for (int j = 0; j <= n; j++){
				if (j == n)
					return "";
				if (bad(res+char('a'+j),minStr))
					continue;
				//cerr <<"!!"<<j<<" "<<calcmax(n,res+char('a'+j)) << endl;
				if (calcmax(n,res+char('a'+j)) < minInv)
					continue;
				res += (char)('a'+j);
				break;				
			}
		}
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, string p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	StrIIRec *obj;
	string answer;
	obj = new StrIIRec();
	clock_t startTime = clock();
	answer = obj->recovstr(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 1;
	p2 = "ab";
	p3 = "ba";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 9;
	p1 = 1;
	p2 = "efcdgab";
	p3 = "efcdgabhi";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 11;
	p1 = 55;
	p2 = "debgikjfc";
	p3 = "kjihgfedcba";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 15;
	p1 = 0;
	p2 = "e";
	p3 = "eabcdfghijklmno";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 9;
	p1 = 20;
	p2 = "fcdebiha";
	p3 = "fcdehigba";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;


class Incubator {

map<ll,int> ans;

ll msk[55];
int cnt[55];
int n;

int go(ll mask){
	if (ans.find(mask) != ans.end())
		return ans[mask];
	if (mask == 0)
		return 0;
		
	int best = -1;
	
	for (int i = 0; i < n; i++)
		if (mask & (1LL<<i)){
			if (best == -1 || __builtin_popcountll(mask & msk[best]) > __builtin_popcountll(mask & msk[i]))
				best = i;
		}
		
	int ans1 = go(mask ^ (1LL<<best));
	int ans2 = go(mask & msk[best])+1;
	
	//cerr <<mask <<" "<<ans1 << " "<<ans2 << endl;
	
	return ans[mask] = max(ans1,ans2);
}

public:
    int maxMagicalGirls(vector <string> g) {        
        n = g.size();
        for (int k = 0; k < n; k++)
        	for (int i = 0; i < n; i++)
        		for (int j = 0; j < n; j++)
        			if (g[i][k]=='Y' && g[k][j] == 'Y')
        				g[i][j] = 'Y';
        				
        				
        for (int i = 0; i < n; i++){
        	if (g[i][i] == 'Y'){
        		for (int j = 0; j < n; j++)
        			g[j].erase(g[j].begin()+i,g[j].begin()+i+1);
        		g.erase(g.begin()+i,g.begin()+i+1);
        		--i,--n;
        	}
        }
                
        if (n == 0)
        	return 0;
        
        for (int i = 0; i < n; i++)
        	for (int j = 0; j < n; j++)
        		if (g[i][j] == 'N' && g[j][i] == 'N' && i != j)
        			msk[i] |= (1LL<<j);            				
        			        			
         
        return go((1LL<<n)-1);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Incubator *obj;
	int answer;
	obj = new Incubator();
	clock_t startTime = clock();
	answer = obj->maxMagicalGirls(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"NY","NN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"NYN","NNY","NNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"NNYNN","NNYNN","NNNYY","NNNNN","NNNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"NNNNN","NYNNN","NYNYN","YNYNN","NNNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"NNNNN","NNNNN","NNNNN","NNNNN","NNNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"NNYNNNNN","NNNYNNNN","NNNNYNNN","NNYNNNNN","NNNNNYYN","NNNYNNNY","NNNNNNNN","NNNNNNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"Y"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

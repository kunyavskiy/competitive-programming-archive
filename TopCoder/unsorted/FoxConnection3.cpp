#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int dx[4] = {1, 0, -1, 0};
const int dy[4] = {0, 1, 0, -1};

class FoxConnection3 {

vector< vector< pair<int, int> > > types;
int n;

void gen(vector< pair<int, int> > v){
	if ((int)v.size() == n) {
		types.pb(v);
		return;
	}
	for (auto x : v) {
		for (int i = 0; i < 4; i++) {
			pair<int, int> nx(x.first + dx[i], x.second + dy[i]);
			bool bad = false;
			if (nx < mp(0, 0)) continue;
			for (auto y : v){
				if (y == nx) {
					bad = true;
					break;
				}
			}
			if (!bad){
				auto nv = v;
				nv.pb(nx);
				gen(nv);
			}
		}
	}
}

public:
    ll minimalSteps(vector <int> x, vector <int> y) {
        {
        	vector<pair<int,int>> v(1, mp(0, 0));
        	n = (int)x.size();
        	gen(v);
        	for (auto& t : types) 
        		sort(t.begin(), t.end());
        	sort(types.begin(), types.end());
        	types.erase(unique(types.begin(), types.end()), types.end());
        }
        long long res = 1e18;
        for (auto t : types) {
        	do {
        		vector<int> xs(n), ys(n);
        		for (int i = 0; i < n; i++) {
        			xs[i] = x[i] + t[i].first;
        			ys[i] = y[i] + t[i].second;
        		}
        		nth_element(xs.begin(), xs.begin() + n/2, xs.end());
        		nth_element(ys.begin(), ys.begin() + n/2, ys.end());
        		int x0 = xs[n/2];
        		int y0 = ys[n/2];
        		long long ans = 0;
        		for (int i = 0; i < n; i++)
        			ans += abs(x[i] + t[i].first - x0) + abs(y[i] + t[i].second - y0);
        		res = min(res, ans);
        	} while (next_permutation(t.begin(), t.end()));
        }
        return res;
    }
};









// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, ll p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxConnection3 *obj;
	ll answer;
	obj = new FoxConnection3();
	clock_t startTime = clock();
	answer = obj->minimalSteps(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	ll p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {0,0,1,-2};
	p1 = {1,-1,0,0};
	p2 = 2LL;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,0,0,0,0,0};
	p1 = {1,2,3,4,5,6};
	p2 = 0LL;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {-123456789,-58585858,-47474747,123,456,789012345};
	p1 = {0,0,0,0,0,0};
	p2 = 1018530309LL;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1,7,3,5,2};
	p1 = {2,7,5,3,7};
	p2 = 12LL;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {-3,0,1,-2,3,2};
	p1 = {2,-3,0,1,-1,-1};
	p2 = 10LL;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {-96277832,507856257,-86306299,-806700273,-775932643,-273209838};
	p1 = {-955536464,-599634138,399850429,-165706338,-537800480,738983556};
	p2 = 5247213600LL;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {0};
	p1 = {0};
	p2 = 0LL;
	all_right = (disabled || KawigiEdit_RunTest(6, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

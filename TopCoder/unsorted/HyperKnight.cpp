#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;


class HyperKnight {


bool good(int x,int y,int nx,int ny){
	return 1 <= x && x <= nx && 1 <= y && y <= ny;
}

public:
    long long countCells(int a, int b, int n, int m, int k) {
        vector<int> xs;
        vector<int> ys;
        xs.pb(1);
        xs.pb(a);
        xs.pb(b);
        xs.pb(n-a);
        xs.pb(n-b);
        xs.pb(n+1);
        
        for (int i = 0; i < 6; i++){
        	if (xs[i] + 1 <= n) xs.pb(xs[i]+1);
        	if (xs[i] + 2 <= n) xs.pb(xs[i]+2);
        	if (xs[i] - 1 >= 1) xs.pb(xs[i]-1);
        	if (xs[i] - 2 >= 1) xs.pb(xs[i]-2);
        }
        
        
        ys.pb(1);
        ys.pb(a);
        ys.pb(b);
        ys.pb(m-a);
        ys.pb(m-b);
        ys.pb(m+1);
        
        for (int i = 0; i < 6; i++){
        	if (ys[i] + 1 <= m) ys.pb(ys[i]+1);
        	if (ys[i] + 2 <= m) ys.pb(ys[i]+2);
        	if (ys[i] - 1 >= 1) ys.pb(ys[i]-1);
        	if (ys[i] - 2 >= 1) ys.pb(ys[i]-2);
        }
        
        sort(xs.begin(),xs.end());
        sort(ys.begin(),ys.end());
        xs.erase(unique(xs.begin(),xs.end()),xs.end());
        ys.erase(unique(ys.begin(),ys.end()),ys.end());
        
        ll ans = 0;
        for (int i = 0; i < (int)xs.size(); i++)
        	for (int j = 0; j < (int)ys.size(); j++){
        		int cnt = 0;
        		for (int di = -1; di <= 1; di+=2)
        			for (int dj = -1; dj <= 1; dj+=2){
        				cnt += good(xs[i]+di*a,ys[i]+dj*b,n,m);
        				cnt += good(xs[i]+di*a,ys[i]+dj*b,n,m);
        			}
        		if (cnt == k){
        			ans += (xs[i+1] - xs[i]) * 1LL * (ys[i+1] - ys[i]);
        		}
        	}
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, long long p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	HyperKnight *obj;
	long long answer;
	obj = new HyperKnight();
	clock_t startTime = clock();
	answer = obj->countCells(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	long long p5;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 1;
	p2 = 8;
	p3 = 8;
	p4 = 4;
	p5 = 20ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 2;
	p2 = 8;
	p3 = 8;
	p4 = 2;
	p5 = 16ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 3;
	p2 = 7;
	p3 = 11;
	p4 = 0;
	p5 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 3;
	p1 = 2;
	p2 = 10;
	p3 = 20;
	p4 = 8;
	p5 = 56ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1;
	p1 = 4;
	p2 = 100;
	p3 = 10;
	p4 = 6;
	p5 = 564ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 2;
	p1 = 3;
	p2 = 1000000000;
	p3 = 1000000000;
	p4 = 8;
	p5 = 999999988000000036ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

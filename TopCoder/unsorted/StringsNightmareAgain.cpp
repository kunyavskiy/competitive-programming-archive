#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int MAXL = 100100; 

class StringsNightmareAgain {


char s[MAXL + 1]; 

struct node{
  node* next[2], *link;
  int len; bool term;
  int maxv, minv;
  node(){
    memset(next,0,sizeof(next));
    len = 0;
    link = 0;
    term = 0;
    minv = 1<<30;
    maxv = -(1<<30);
  }
};
node memnode[2 * MAXL];
int memnodeptr;
node *root, *last;

void add(int c){
  node* nlast = &memnode[memnodeptr++];
  *nlast = node();
  nlast->len = last->len + 1;
  node* p = last;
  for (;p && p->next[c] == 0; p = p->link)
    p->next[c] = nlast;
  if (p == 0){
    nlast->link = root;
    last = nlast;
    return;
  }
  node* q = p->next[c];
  if (q->len == p->len + 1){
    nlast->link = q;
    last = nlast;
    return;
  }
  node* clone = &memnode[memnodeptr++];
  memcpy(clone, q, sizeof(node));
  clone->link = q->link;
  clone->len = p->len + 1;
  q->link = nlast->link = clone;
  for (;p && p->next[c] == q; p = p->link)
    p->next[c] = clone;
  last = nlast;
}

void build(){
  memnodeptr = 0;
  last = root = &memnode[memnodeptr++];
  memset(root, 0, sizeof(node));
  puts(s);
  for (int i = 0; s[i]; i++) {
    add(s[i]-'a');
  }
  for (node* it = last; it; it=it->link)
    it->term = true;
}


void dfs(node* v){
	if (v->term) v->minv = v->maxv = 0;
	for (int i = 0; i < 2; i++)
	if (v->next[i]){
		dfs(v->next[i]);
		v->minv = min(v->minv, v->next[i]->minv + 1);
		v->maxv = max(v->maxv, v->next[i]->maxv + 1);
	}
}

public:
    ll UniqueSubstrings(int a , int b, int c, int d, int n) {
        memset(s, 'a', sizeof(char)*n);
        s[n] = 0;
        for (int i = 0; i < a; i++){
        	b = (b * 1LL * c + d) % n;
        	s[b] = 'b';
        }
        build();
        dfs(root);
        ll res = 0;
//        for (int i = 0; i < memnodeptr; i++)
//        	printf("%d %d %d\n", memnode[i].next[0] - memnode, memnode[i].next[1] - memnode, memnode[i].term);
        for (int i = 1; i < memnodeptr; i++){
        	node* v =&memnode[i];
        	int maxlen = v->len;
        	int minlen = v->link->len;
//         	eprintf("%d %d %d %d %d\n",maxlen, minlen, v->maxv, v->minv, v->term);
        	maxlen = min(maxlen, v->maxv - v->minv);
        	res += max(maxlen - minlen, 0);
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, ll p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	StringsNightmareAgain *obj;
	ll answer;
	obj = new StringsNightmareAgain();
	clock_t startTime = clock();
	answer = obj->UniqueSubstrings(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	ll p5;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 0;
	p1 = 0;
	p2 = 0;
	p3 = 0;
	p4 = 4;
	p5 = 2LL;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 2;
	p1 = 3;
	p2 = 1;
	p3 = 1;
	p4 = 6;
	p5 = 3LL;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 4;
	p1 = 3;
	p2 = 1;
	p3 = 1;
	p4 = 6;
	p5 = 3LL;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 4;
	p1 = 3;
	p2 = 3;
	p3 = 3;
	p4 = 10;
	p5 = 5LL;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 5;
	p1 = 3;
	p2 = 2;
	p3 = 3;
	p4 = 11;
	p5 = 9LL;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 10;
	p1 = 1000000;
	p2 = 1000000;
	p3 = 1;
	p4 = 51;
	p5 = 63LL;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

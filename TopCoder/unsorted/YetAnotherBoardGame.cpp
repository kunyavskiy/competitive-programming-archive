#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;


class YetAnotherBoardGame {

int init[15];
int n,m;
int ans;
int ALL;

void go(int row,int upmask,int mymask, int mask1,int mask2,int res){
	//printf("%d %d %d %d %d %d\n",row,upmask,mymask ^ init[row],mask1,mask2,res);
	if (res >= ans) return;
	if (row == n) {
		if (upmask == 0)
			ans = min(ans,res);
		return;
	}
	if ((upmask & mask2) == 0)
		go(row+1, (mymask ^ init[row] ^ upmask ^ (upmask << 1) ^ (upmask >> 1)) & ALL, upmask, mask1 | upmask, mask2, res + __builtin_popcount(upmask));
	if (upmask != 0 && (upmask & mask1) == 0)
		go(row+1, (mymask ^ init[row] ^ (upmask << 1) ^ (upmask >> 1)) & ALL, upmask, mask1 , mask2 | upmask, res + __builtin_popcount(upmask));
}

public:
    int minimumMoves(vector <string> v) {
       n = (int)v.size();
       m = (int)v[0].size();
       ALL = (1<<m)-1;
       for (int i = 0; i < n; i++)
       	  for (int j = 0; j < m; j++)
       	  	  if (v[i][j] == 'W')
        	  	 init[i] |= (1<<j);
      // for (int i = 0; i < m; i++)
       //	   printf("%d%c",init[i]," \n"[i==n-1]);
       ans = (1<<30);
       for (int i = 0; i < (1<<m); i++){
           go(1,(init[0] ^ i ^ (i<<1) ^ (i>>1)) & ALL, i, i, 0, __builtin_popcount(i));
      //     break;
           go(1,(init[0] ^ (i<<1) ^ (i>>1)) & ALL, i, 0, i, __builtin_popcount(i));
       }
       if (ans == (1<<30))
       	 ans = -1;
       return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	YetAnotherBoardGame *obj;
	int answer;
	obj = new YetAnotherBoardGame();
	clock_t startTime = clock();
	answer = obj->minimumMoves(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"BBBBBBBBB","BBWBBBBBB","BWWWBBBBB","BBWBBBWBB","BBBBBWBWB","BBBBBBWBB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"BBW","WWW","BWW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"WBW","BBW","WBW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"BBBB","WBWB","BBBB","BBBB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"WWWWWBW","WBWBWBW","BBWBBWW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"WWWWWWWWWW","WWWWWWWWWW","WWWWWWWWWW","WWWWWWWWWW","WWWWWWWWWW","WWWWWWWWWW","WWWWWWWWWW","WWWWWWWWWW","WWWWWWWWWW","WWWWWWWWWW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 30;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


class PieOrDolphin {

vector<int> a, b;
int n;
vector<vector<int>> g;
vector<int> deg;
vector<bool> used;

int dfs(int v){
	if (used[v]) return false;
	if (deg[v] < 0) return true;
	used[v] = true;
	for (int i = 0; i < (int)g[v].size(); i++){
		int id = g[v][i];
		if (a[id] != v) continue;
		if (dfs(b[id])){
			deg[a[id]]-=2;
			deg[b[id]]+=2;
			swap(a[id], b[id]);
			return true;
		}
	}
	return false;
}

int dfs2(int v){
	if (used[v]) return false;
	if (deg[v] > 0) return true;
	used[v] = true;
	for (int i = 0; i < (int)g[v].size(); i++){
		int id = g[v][i];
		if (b[id] != v) continue;
		if (dfs(a[id])){
			deg[a[id]]-=2;
			deg[b[id]]+=2;
			swap(a[id], b[id]);
			return true;
		}
	}
	return false;
}



public:
    vector <int> Distribute(vector <int> _a, vector <int> _b) {
    	n = 50;
    	int m = _a.size();
        a = _a;
        b = _b;
        g = vector<vector<int>>(n);
        deg = vector<int>(n);
        for (int i = 0; i < (int)m; i++){
        	g[a[i]].pb(i), g[b[i]].pb(i);
        	deg[a[i]]++;
        	deg[b[i]]--;
        }
        
        while (true){
        	bool any = false;
        	used = vector<bool>(n);
        	for (int i = 0; i < n; i++)
        		if (deg[i] > 1)
        			if (dfs(i)) {
        				any = true;
        				break;
        			}
        	if (!any){
	        	used = vector<bool>(n);
    	    	for (int i = 0; i < n; i++)
        			if (deg[i] < -1)
        				if (dfs2(i)) {
        					any = true;
        					break;
        				}
        	}
        	vector<int> ndeg(n);
        	for (int i = 0; i < (int)a.size(); i++)
        		ndeg[a[i]]++, ndeg[b[i]]--;
        	assert(ndeg == deg);        			
        	if (!any) break;
        }
        
        eprintf("%d %d %d\n", deg[10], deg[20], deg[30]);
        
        vector<int> res(m);
        for (int i = 0; i < m; i++)
        	if (a[i] == _a[i])
        		res[i] = 1;
        	else
        		res[i] = 2;
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	PieOrDolphin *obj;
	vector <int> answer;
	obj = new PieOrDolphin();
	clock_t startTime = clock();
	answer = obj->Distribute(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {10,20,10};
	p1 = {20,30,20};
	p2 = {2,2,1};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,0};
	p1 = {1,1};
	p2 = {2,1};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {0,1,2,3,5,6,7,8};
	p1 = {8,7,6,5,3,2,1,0};
	p2 = {2,2,2,2,2,2,2,2};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {49,0,48,1};
	p1 = {3,4,5,6};
	p2 = {2,2,2,2};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {21,4,14,0,31,46,1,34,2,3,27,19,47,46,17,11,41,12,31,0,34,18,8,14,23,40,0,18,48,35,42,24,25,32,25,44,17,6,44,34,12,39,43,39,26,34,10,6,13,2,40,15,16,32,32,29,1,23,8,10,49,22,10,15,40,20,0,30,1,43,33,42,28,39,28,4,38,11,5,1,47,12,0,22,20,33,33,34,18,8,23,6};
	p1 = {25,5,39,20,44,47,11,49,42,17,25,15,23,11,32,17,24,4,11,47,27,41,40,0,49,27,5,28,6,11,18,0,17,1,0,32,45,28,17,5,13,40,40,25,33,7,8,32,12,0,39,30,8,39,23,9,8,34,34,37,5,1,24,23,0,29,11,42,29,40,24,18,37,1,21,0,31,47,23,33,45,48,31,11,40,45,24,22,19,26,37,39};
	p2 = {2,2,2,2,2,2,2,2,1,2,2,2,2,1,2,1,2,1,1,1,2,2,2,1,2,2,2,1,2,2,1,1,2,2,1,2,1,2,1,1,2,2,1,1,2,1,2,2,2,2,1,2,2,2,2,2,1,1,1,2,2,1,1,1,2,2,1,2,1,2,2,2,1,2,2,1,2,1,2,2,1,2,1,1,1,2,1,1,2,2,2,1};
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

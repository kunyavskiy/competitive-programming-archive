#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int MOD = 1000000007;

void madd(int& x, int y){
	if ((x += y) >= MOD) x -= MOD;
}

int mmul(int x, int y){
	return ll(x) * y % MOD;
}

class CycleColoring {


vector<int> dp[2];

int calceq(int len, int ){
	return dp[1][len];
}

int calcdiff(int len, int ){
	return dp[0][len];
}


int calceq(int len1, int len2, int k){
	return mmul(calceq(len1, k), calceq(len2, k));
}

int calcdiff(int len1, int len2, int k){
	return mmul(calcdiff(len1, k), calcdiff(len2, k));
}

public:
    int countColorings(vector <int> vs, vector <int> from, vector <int> to, int K) {
    	rotate(to.begin(), to.end() - 1, to.end());
        int maxsz = *max_element(vs.begin(), vs.end());
        dp[0].resize(maxsz + 1);
        dp[1].resize(maxsz + 1);
        dp[0][1] = K - 2, dp[1][1] = K - 1;
        dp[0][0] = 1;
        dp[1][0] = 0;
        for (int i = 2; i <= maxsz; i++){
        	madd(dp[1][i], mmul(K - 1, dp[0][i - 1]));
        	madd(dp[0][i], dp[1][i - 1]);
        	madd(dp[0][i], mmul(K - 2, dp[0][i - 1]));
        }
        
        int ans0, ans1;
        ans0 = 0;
        ans1 = K;
        
        for (int i = 0; i < (int)vs.size(); i++){
        	//eprintf("%d %d\n", ans0, ans1);
        	int nans0, nans1;
        	nans0 = nans1 = 0;
        	
    	    if (from[i] == to[i]){
        		ans0 = mmul(ans0, calceq(vs[i] - 1, K));
        		ans1 = mmul(ans1, calceq(vs[i] - 1, K));
        		continue;
        	}

        	
        	int len1 = (to[i] - from[i] + 2*(int)vs[i] - 1) % vs[i];
        	int len2 = (int)vs[i] - len1 - 2;
        	
        	madd(nans1, mmul(ans1, calceq(len1, len2, K)));
        	madd(nans1, mmul(ans0, calcdiff(len1, len2, K)));
        	madd(nans0, mmul(ans0, calceq(len1, len2, K)));
        	madd(nans0, mmul(ans0, mmul(K - 2, calcdiff(len1, len2, K))));
        	madd(nans0, mmul(ans1, mmul(K - 1, calcdiff(len1, len2, K))));
        	
        	ans0 = nans0, ans1 = nans1;
        }
        
        
        return ans1;       
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << p3;
	cout << "]" << endl;
	CycleColoring *obj;
	int answer;
	obj = new CycleColoring();
	clock_t startTime = clock();
	answer = obj->countColorings(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	int p4;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {3,3};
	p1 = {0,0};
	p2 = {0,0};
	p3 = 3;
	p4 = 12;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {6};
	p1 = {4};
	p2 = {1};
	p3 = 3;
	p4 = 12;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {3,3};
	p1 = {0,1};
	p2 = {1,2};
	p3 = 3;
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {9,5};
	p1 = {8,3};
	p2 = {0,2};
	p3 = 8;
	p4 = 589124602;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {14,15,16,17};
	p1 = {5,10,4,6};
	p2 = {10,3,14,10};
	p3 = 614;
	p4 = 818050159;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {482373,283712,883,12834,5,5,482734,99912,35881,277590};
	p1 = {59283,49782,0,0,3,2,84791,40017,2263,461};
	p2 = {150173,709,11108,0,4,7,5902,712,190232,390331};
	p3 = 479360784;
	p4 = 763634309;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

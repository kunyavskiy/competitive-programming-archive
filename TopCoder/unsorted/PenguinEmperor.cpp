#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int MOD = 1000000007;

struct vect{
	vector<int> v;
	int& operator[](int id){
		return v[id];
	}
	vect(int n){
		v.resize(n);
	}
};

void ADD(int& a,int b){
	if ((a += b) >= MOD) a -= MOD;
}

vect operator*(vect a,vect b){
	int sz = a.v.size();
	vect res(sz);
	for (int i = 0; i < sz; i++)
		for (int j = 0; j < sz; j++)
			ADD(res[(i+j)%sz],(a[i] * 1LL * b[j]) % MOD);
	return res;
}

vect operator^(vect a,ll b){
	vect res(a.v.size());
	res[0] = 1;
	for (int i = 0; (1LL<<i) <= b; i++){
		if (b & (1LL<<i))
			res = res * a;
		a = a * a;
	}
	return res;
}

class PenguinEmperor {


public:
    int countJourneys(int n, ll d) {
        vect res(n);
        res[0] = 1;
        vect cyc(n);
        cyc[0] = 1;
        for (int i = 1; i < n; i++){
        	vect temp(n);
        	temp[i] = 1;
        	temp[n - i] = 1;
        	cyc = cyc * temp;
        }
        
        res = cyc ^ (d / n);
        d %= n;
        
        for (int i = 1; i < d; i++){        	
        	vect temp(n);
        	temp[i] = 1;
        	temp[n - i] = 1;
        	res = res * temp;
        }
        return res[0];
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, ll p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	PenguinEmperor *obj;
	int answer;
	obj = new PenguinEmperor();
	clock_t startTime = clock();
	answer = obj->countJourneys(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	ll p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 2ll;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 3ll;
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 36ll;
	p2 = 107374182;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 300;
	p1 = 751ll;
	p2 = 413521250;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 300;
	p1 = 750ll;
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 350;
	p1 = 1000000000000000000ll;
	p2 = 667009739;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 5;
	p1 = 7ll;
	p2 = 12;
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

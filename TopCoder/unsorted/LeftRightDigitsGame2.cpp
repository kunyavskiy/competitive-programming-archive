#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;

bool cmp(const string& a,const string& b){
	if (a == "") return false;
	if (b == "") return true;
	return a < b;
}

class LeftRightDigitsGame2 {

string dp[50][50][3];
string lb;

public:
    string minNumber(string d, string lb) {
        this->lb = lb;
        int n = d.size();
        
        for (int len = 1; len <= n; len++)
        	for (int i = 0; i + len <= n; i++){
        		int j = i + len - 1;
        		if (len == 1){
        			dp[i][j][0] += d[0];
        			if (d[0] >= lb[i]) dp[i][j][1] += d[0];
        			if (d[0] > lb[i])  dp[i][j][2] += d[0];
        		    //cerr << i <<" "<<j <<" 0="<<dp[i][j][0] <<" 1="<<dp[i][j][1] <<" 2="<<dp[i][j][2] << " !!!!!!"<<d[len-1] << endl;
        			continue;
        		}
        		
        		
        		for (int k = 0; k < 3; k++){
        		    if (dp[i+1][j][k] == "") continue;
        			string T = d[len-1] + dp[i+1][j][k];
        			string S = string(lb.begin()+i,lb.begin()+i+len);
        			//cerr << k<<" !! "<<T <<" "<<S<<endl;
        			dp[i][j][0] = min(dp[i][j][0], T, cmp);
        			if (T >= S) dp[i][j][1] = min(dp[i][j][1], T, cmp);
        			if (T > S) dp[i][j][2] = min(dp[i][j][2], T, cmp);
        		}
        		
        		for (int k = 0; k < 3; k++){
        		    if (dp[i][j-1][k] == "") continue;
        			string T = dp[i][j-1][k] + d[len-1];
        			string S = string(lb.begin()+i,lb.begin()+i+len);
        			dp[i][j][0] = min(dp[i][j][0], T, cmp);
        			if (T >= S) dp[i][j][1] = min(dp[i][j][1], T, cmp);
        			if (T > S) dp[i][j][2] = min(dp[i][j][2], T, cmp);
        		}
        		//cerr << i <<" "<<j <<" 0="<<dp[i][j][0] <<" 1="<<dp[i][j][1] <<" 2="<<dp[i][j][2] << " !!!!!!"<<d[len-1] << endl;
        	}
        
        
        if (dp[0][n-1][1] != "")
        	return dp[0][n-1][1];
        return dp[0][n-1][2];       	
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	LeftRightDigitsGame2 *obj;
	string answer;
	obj = new LeftRightDigitsGame2();
	clock_t startTime = clock();
	answer = obj->minNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "565";
	p1 = "556";
	p2 = "556";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "565";
	p1 = "566";
	p2 = "655";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "565";
	p1 = "656";
	p2 = "";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "9876543210";
	p1 = "5565565565";
	p2 = "5678943210";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "8016352";
	p1 = "1000000";
	p2 = "1086352";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

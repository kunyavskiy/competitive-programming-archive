#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long double ld;


class EllysRivers {


public:
	double getMin(int len, int ws, vector <int> w, vector <int> s) {
		int n = w.size();

		vector<double> dp1(len+1),dp2(len+1);
		
		dp1.assign(len+1,1e100);
		dp2.assign(len+1,1e100);
		dp1[0] = 0.0;
		
		for (int i = 0; i < n; i++){
			//cerr << i << endl;
			for (int j = 1; j <= len; j++)
				dp1[j] = min(dp1[j],dp1[j-1] + 1.0/ws);
			
			int ptr = -1;
			
			for (int j = 0; j <= len; j++){
				ptr++;
				while (ptr > 0 && (dp1[j-ptr] + sqrt(w[i]*1LL*w[i] + ptr * 1LL * ptr)/s[i] > dp1[j-ptr+1] + sqrt(w[i]*1LL*w[i] + (ptr-1) * 1LL * (ptr-1))/s[i]))
					ptr--;
				dp2[j] = (dp1[j-ptr] + sqrt(w[i]*1LL*w[i] + ptr * 1LL * ptr)/s[i]);
			}
			dp1.swap(dp2);
			dp2.assign(len+1,1e100);
		}
		
		
		for (int j = 1; j <= len; j++)
			dp1[j] = min(dp1[j],dp1[j-1] + 1.0/ws);
		
		return dp1[len];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	EllysRivers *obj;
	double answer;
	obj = new EllysRivers();
	clock_t startTime = clock();
	answer = obj->getMin(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	vector <int> p3;
	double p4;
	
	{
	// ----- test 0 -----
	p0 = 10;
	p1 = 3;
	int t2[] = {5,2,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {5,2,7};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3.231651964071508;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10000;
	p1 = 211;
	int t2[] = {911};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {207};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 48.24623664712219;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1337;
	p1 = 2;
	int t2[] = {100,200,300,400};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {11,12,13,14};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 128.57830549575695;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 77;
	p1 = 119;
	int t2[] = {11,12,13,14};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {100,200,300,400};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 0.3842077071089629;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 7134;
	p1 = 1525;
	int t2[] = {11567,19763,11026,10444,24588,22263,17709,11181,15292,28895,15039,18744,19985,13795,26697,18812,25655,13620,28926,12393};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1620,1477,2837,2590,1692,2270,1655,1078,2683,1475,1383,1153,1862,1770,1671,2318,2197,1768,1979,1057};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 214.6509731258811;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

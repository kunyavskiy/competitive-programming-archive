#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;


class CentaurCompany {

vector<int> g[40];
int n;
vector<double> dp[40][40][40][2];
int size[40];

int dfs1(int v,int p){
	size[v] = 1;
	for (int i = 0; i < (int)g[v].size(); i++)
		if (g[v][i] != p)
			size[v] += dfs1(g[v][i],v);
	return size[v];
}

double dfs(int v,int son,int p,int cnt,int k,int cur){
	if (son == -1){
		if (cnt == cur && k == cur)
			return 1.0;
		return 0.0;
	}
	if (k < cur || cnt < cur) return 0;
	if (k > size[v] || cnt > size[v] || k > cnt) return 0;
	if (dp[v][cnt][k][cur].size() == 0)
		dp[v][cnt][k][cur].resize(g[v].size(),-1);
	double& ans = dp[v][cnt][k][cur][son];
	if (ans > -0.5)
		return ans;
	ans = 0;
	if (g[v][son] == p)
		return ans = dfs(v,son-1,p,cnt,k,cur);
		
	int sonv = g[v][son];
	
	for (int i = 0; i <= cnt && i <= size[sonv]; i++)
		for (int j = 0; j <= k && j <= size[sonv]; j++)
			ans += (dfs(v,son-1,p,cnt-i,k-j,cur) * dfs(g[v][son],(int)g[g[v][son]].size()-1,v,i,j,0) + dfs(v,son-1,p,cnt-i,k - j + cur,cur) * dfs(g[v][son],(int)g[g[v][son]].size()-1,v,i,j,1))/2.0;
	//cerr << "!!!"<<v << " "<<son <<" "<<p <<" "<<cnt <<" "<<k <<" "<<cur << ans << endl;
	return ans;
}

public:
    double getvalue(vector <int> a, vector <int> b) {
		n = (int)a.size()+1;
		for (int i = 0; i < n-1; i++){
			g[a[i]-1].pb(b[i]-1);
			g[b[i]-1].pb(a[i]-1);
		}
		dfs1(0,-1);
		double ans = 0;
		for (int i = 0; i <= n; i++)
			for (int j = 0; j <= n; j++) {
				//cerr << i <<" "<<j <<" "<< dfs(0,(int)g[0].size()-1,-1,i,j,0) << " "<<dfs(0,(int)g[0].size()-1,-1,i,j,1)<<" "<<max(0,2*i-j-2)<<endl;
				ans += (dfs(0,(int)g[0].size()-1,-1,i,j,0) + dfs(0,(int)g[0].size()-1,-1,i,j,1)) * max(0,2*j-i-2);
			}
		return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	CentaurCompany *obj;
	double answer;
	obj = new CentaurCompany();
	clock_t startTime = clock();
	answer = obj->getvalue(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	double p2;
	
	{
	// ----- test 0 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.125;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2,3,2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,3,4,5,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.375;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,2,3,4,5,6,7,8,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,3,4,5,6,7,8,9,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.41796875;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 15.500000001076842;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {10,7,2,5,6,2,4,9,7};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {8,10,10,4,1,6,2,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0.646484375;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

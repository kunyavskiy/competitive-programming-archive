#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;


const int MOD = 1000000009;

class ColorfulBuilding {

string concat(vector<string> _s){
	string s = "";
	for (int i = 0; i < (int)_s.size(); i++)
		s += _s[i];
	return s;
}

int dp[1300][1300];
int dp2[1300][1300];
int dp3[1300];
int f[1300];
int invf[1300];

int pow(int a,int b){
	if (!b) return 1;
	if (b & 1) return (pow(a,b-1) * 1LL * a) % MOD;
	return pow((a*1LL*a) % MOD, b/2);
}

public:
    int count(vector <string> _s1, vector <string> _s2, int L) {
        string s1 = concat(_s1);
        string s2 = concat(_s2);
        vector<int> s(s1.size());
        for (int i = 0; i < (int)s.size(); i++)
        	s[i] = ((int)s1[i]) * 256  + s2[i];
        	
        reverse(s.begin(),s.end());
        {
        	map<int,int> temp;
    	    for (int i = 0; i < (int)s.size(); i++){
	        	if (temp.find(s[i]) != temp.end())
        			temp[s[i]] = i;
        		s[i] = temp[s[i]];	
           }
        }
        /*for (int i = 0; i < (int)s.size(); i++)
        	printf("%d ",s[i]);
        printf("\n");
        */
        
        f[0] = invf[0] = 1;
        for (int i = 1; i < 1300; i++){
        	f[i] = (f[i-1] * 1LL * i) % MOD;
        	invf[i] = pow(f[i],MOD-2);
        }
        
        int n = s1.size();
        dp[0][1] = 1;
        
        for (int i = 1; i < n; i++)
        	for (int j = 1; j <= L; j++){
        		//for (int k = 0; k < i; k++)
        		//	dp[i][j] = (dp[i][j] + ((dp[k][j - (s[i] != s[k])] * 1LL * f[i-1]) % MOD * invf[k]) % MOD) % MOD;
        		//printf("%d %d %d\n",i,j,dp[i][j]);
        		dp[i][j] = (dp3[j-1] - (ll)dp2[j-1][s[i]] + (ll)dp2[j][s[i]] +  MOD) % MOD;

        		dp[i][j] = (dp[i][j] * 1LL * f[i-1]) % MOD;
        		ll temp = (dp[i][j] * 1LL * invf[i]) % MOD;
                dp3[j] = (dp3[j] + temp) % MOD;
                dp2[j][s[i]] = (dp2[j][s[i]] + temp) % MOD;
        	}
        
        int res = 0;
        for (int i = 0; i < n; i++)
        	res = (res + ((dp[i][L] * 1LL * f[n-1]) % MOD * invf[i]))% MOD;
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	ColorfulBuilding *obj;
	int answer;
	obj = new ColorfulBuilding();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"aaba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"aaaa"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"aaba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"aaba"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"ab","ba","a","aab"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"bb","ba","a","aba"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = 432;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"xxxxxxxxxxxxxxxxxxxx","xxxxxxxxxxxxxxxxxxxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOxxxxxxxxxxxxxxxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxxxxxxxxxxxxxxxOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxxxxxxxxxxxxxxxxxxx","xxxxxxxxxxxxxxxxxxxx"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"xxxxxxxxxxxxxxxxxxxx","xxxxxxxxxxxxxxxxxxxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOxxxxxxxxxxxxOOxx","xxOOOOOOOOOOOOOOOOxx","xxOOOOOOOOOOOOOOOOxx","xxxxxxxxxxxxxxxxxxxx","xxxxxxxxxxxxxxxxxxxx"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 58;
	p3 = 619787617;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"SJXcabKTWeUXhwxGixFepQaQlFxrAedNAtVP","gorBIkcTlOFbLDbFeElYAyAqszQdMbpxSRdE","SQVHPehlNtesbJDflyGxMqvgzjXisRnqDcQO","pIAEBwbmpPWCooQAujbGXFGLvXxTmExLARkf","AFnWyWKVObfxDGCjTxdZaObgwdxlPKtIxaAd","uznMpJVNjAofbHJjOrZeSHgSagOCUMGbvkVR","LBRrDbTAyKfVnedKiRfzgRzECpcsziqaTwdo","JrJHvsEVVGDkNVGqLbpxyLDPloBuNDQKnReI","SSYpbjKHSCnQhuyYrVauWDHDyhAoGyecrZMv","UdetQfWEUWHHuAxRSdkJOOJSixKpQXpCFZHO","KXVsQbuQtIgsULOMsTvPFNUqkBldMTLCipYK","hoXConjnDWQkZVtyZlwSedvdVrNWqQhGUClQ","TpsvvyoXsXmQpBAGGVDrXCkodoRHQZmpoQDW","csiJspzTqeFBRmPgeEtTAzfrfCGlTZqcPuyO","vsPDVBJVaJmUAtDdcsKoUkPEbDmAwtZKwjjP","MOfoMhMiKIvGQoeIJXHzyClWRtRuKXMqxUAF","KyyUCkRBjsYvmPFFEGBqqVhIUdtvIyyLacfu","BfuwfSajSlcuTzhMufHSQLudvGEGlyHsEmBD","PLpIXZkdyXveTMfSvqnDGKWOZrTBMUIlZrqF","dzVMCqrSLbanRJTYpDJNHAOLPSzmvSEPQJYm","rAjRkrSjouJyFaCSPPLYSzqDmMoADyWAbobJ","eOCBrJNoyFnGpXpxiExXcoOHnVsaEPXhPfLe","XMjRksnxWssPEINhdhbiLBSYpCLtwNshFjXS","HnnDeUAbuswsgsYQuAaXySLkFYUwFXwYTreM","uqLnwOEGbwZZDgAAWEdLRZxFlogDmlhjhgHM","NcfaQsgPQfirkYDRFrLQpySmB"
			"GfRHumKULZf","mOpmmgclsxRzXskEywfryqCRyATNoJwnlHiD","AnoKoKAjrasttjNlHCROnvTJMhEHlVPVoVMo","yegLyIuRkkENFAjwzDoPLKjgUHHEkfzYDIpo","EcxRGGfuaBXUFXkSxctJWOLmmVbvoMkWtTvV","nBMkOBHgaltEVzfyGxseGhmBscfGIbxFbqRn","GvkEcLtqdOofGtsbWDafVMbNdJxsffKDzSiR","jhZQUVzTzalrZcebvyqPWtOUUyniBKTWdyLi","ODJLQPMdjDdTlxrfGsNmBfeGYjzeXApqKDhJ","vlJkWMzdVQujKdLViQClOrJXMTBkuZEasFgg","FAsbuzrLVIgaryqXBfuBRAbReleXSSgEKSvt"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"XAhlUHtfjOpOlQlowWppQcodMGUiqoLobxnD","IDzGlKrHiVGdBjZxIcoxjwagbWieKvUwZrjg","SkpkTVeIFeoNQzUUgmYAYskKONNZdgXxSiWd","rXBGhTmqnvxkmqiutoDzPusDiOUggEFXGCzm","fzrxVuTbFXunGbeEavjshmrIRlDorTuISCxn","LsvIaxTkOBjcskiekmrKNNFEXqnfMNXLWqqu","ekzxGIlbJPVEQPYAbTuMtZKsCiubDXDiBVzU","hZuOCJxvBOYENGSFcUiKKAKfCdebutVmnyvB","UveNkKRQmHnedrROQOpHJfrHjwcNLUShlDbn","ptUkvbaGDryHRkYfHKLkSgVpjWCEcgazyxGK","nVPYEqTTJsRPjzjfdOiULhnZPFeNcnbXaQlk","IPXBXRhMQIkxpygsgbcRfMuvIcuzUPPHGOWX","yWWlNyEyqZSIOXBFAybIuFpVqpvmKRaRFrAE","EvBJVtHvKhjrFcmtpdBbFTdTVtXXZQKAglKT","bCVjHzUvyINFkxXageZQMzCyNhcifACdJVDh","lZITYcDSeIbLweyFtoMAfOQyBNupKlhcNpgo","BduslNrJdWOUukYFFidEkMFaghfofpxVgvJd","YrJpDZKqdjEPzdLsOQEdkcrBfNHPemXHokCW","GjeUKSGjDlgKTyUGNrMQbBLxRUcgrWpkAwOD","wgxTcswqdJHaDugNIRMvrhBsdDaJAssVbSRW","qmVmqFEpvgGioMXDSFqEoQcDOAaUoGPEovSO","KrukPlpfOhawaovCfteTSCIdLMrtImVtiMyQ","ykwmxHsKMFzFHwcbyyedLvhZPnaNGqJMMCxd","HUNYCXjNLQIFCLLGpCXHBCHLTxLynBxnHFbx","uwjzbNbJepVFgMPUXVirxYHzExquBEtPmKju","xXAxAbJePyUsVHeLytDvAxBGM"
			"RtnvCEiZZqe","xMkQoIVxWPXPgaOYmDjTOXiMImVdzojERNxS","dwICFwMAmdOIUxyAdXdshasnzwyhfnVWVqZJ","etypXNVvSTEQvriGBZdSGmDEHhvpSqkFklCS","YkxpFBCRYUueRcKaJUXVdaMoYMYEooPQVMOr","DTrexDqclZNKdPuTRFHualJSFziCLPCZjpxo","TfEijcAsSJPikkmBSbXMqYHAhPTcpcKVSkIX","xKXHYPYMJxFpSbxltDKYuRiTkOLxpQKnXZPs","YFYuvuYHfpFJcrLNIdlNfBxRnWdppsdalBkx","NFTysBvNFjejdnlhRTclbcfGipNCxpFEOriY","thkgVflJYmbUYbIlafNUMGePQWiZyYzYXvUR"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1200;
	p3 = 396065426;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


struct shop {
   int open;
   int r,b,g;
   int close;
   shop(){}
   shop(int open, int r,int b,int g) : open(open), r(r), b(b), g(g){
      close = open + r + b + g - 1;
   }
   bool operator<(const shop& r) const{
   	return open < r.open;
   }
};

const int MOD = 1000000007;

class WinterAndShopping {

int dp[110][110][110];
int dp2[110][110][110];

int f[330];
int invf[330];

int pow(int a, int b){
	if (!b) return 1;
	if (b & 1) return (pow(a, b-1) * 1LL * a) % MOD;
	int tmp = pow(a, b/2);
	return (tmp * 1LL * tmp) % MOD;
}

void add(int& a, int b){
	if ((a += b) >= MOD) a -= MOD;
}

int getcoef(int a,int b, int c){
	int res = 1;
	res = (res * 1LL * f[a + b + c]) % MOD;
	res = (res * 1LL * invf[a]) % MOD;
	res = (res * 1LL * invf[b]) % MOD;
	res = (res * 1LL * invf[c]) % MOD;
	return res;
}

int solve(vector<shop> v){
   v.pb(shop(1000, 0, 0, 0));
   int cur, ptr;
   cur = 0, ptr = 1;
   dp[v[0].r][v[0].g][v[0].b] = 1;
   while (true) {
       	if (v[cur].open == 1000) return dp[0][0][0];
     	int tot = v[cur].r + v[cur].g + v[cur].b;
     	int sum;
     	for (sum = 0; sum < tot && v[cur].open + sum < v[ptr].open; sum++){
     		for (int i = 0; i <= v[cur].r; i++)
     			for (int j = 0; j <= v[cur].g; j++){
     				int k = tot - sum - i - j;
     				if (k < 0 || k > v[cur].b || !dp[i][j][k]) continue;
     				if (i) add(dp[i-1][j][k], dp[i][j][k]);
     				if (j) add(dp[i][j-1][k], dp[i][j][k]);
     				if (k) add(dp[i][j][k-1], dp[i][j][k]);
     			}
     	}
     	if (sum == tot) {
     		cur = ptr;
     		ptr = cur+1;
     		int tmp = dp[0][0][0];
     		memset(dp, 0, sizeof(dp));
     		dp[v[cur].r][v[cur].g][v[cur].b] = tmp;
     		continue;
     	}
     	memset(dp2, 0, sizeof(dp2));
     	if (v[cur].close < v[ptr].close) {
     		for (int i = 0; i <= v[ptr].r && i <= v[cur].r; i++)
     		for (int j = 0; j <= v[ptr].g && j <= v[cur].g; j++){
     		   int k = tot - sum - i - j;
 			   if (k < 0 || k > v[cur].b || k > v[ptr].b) continue;
     		   add(dp2[v[ptr].r - i][v[ptr].g - j][v[ptr].b - k], (dp[i][j][k] * 1LL * getcoef(i,j,k)) % MOD);
     	    }
     		cur = ptr;
     		ptr++;
     	} else {
     	    int coef = getcoef(v[ptr].r, v[ptr].g, v[ptr].b);
     		for (int i = v[ptr].r; i <= v[cur].r; i++)
     		for (int j = v[ptr].g; j <= v[cur].g; j++){
     		   int k = tot - sum - i - j;
 			   if (k < 0 || k > v[cur].b || k < v[ptr].b) continue;
     		   add(dp2[i - v[ptr].r][j - v[ptr].g][k - v[ptr].b], (dp[i][j][k] * 1LL * coef) % MOD);
     		}
     		ptr++;
     	}
     	memcpy(dp, dp2, sizeof(dp2));
   }
}

public:
    int getNumber(vector <int> open, vector <int> r, vector <int> g, vector <int> b) {
        vector<shop> v(open.size());
        for (int i = 0; i < (int)open.size(); i++)
        	v[i] = shop(open[i], r[i], g[i], b[i]);
        sort(v.begin(), v.end());
        f[0] = invf[0] = 1;
        for (int i = 1; i < 330; i++) {
        	f[i] = (f[i-1] * 1LL * i) % MOD;
        	invf[i] = pow(f[i], MOD - 2);
        	assert((f[i] * 1LL * invf[i]) % MOD == 1);
        }
        return solve(v);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	WinterAndShopping *obj;
	int answer;
	obj = new WinterAndShopping();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	int p4;
	
	{
	// ----- test 0 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 6;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {47,47};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {0,0};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,100,200};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {100,1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {100,3,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {100,2,4};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 79290907;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {1,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {4,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 840;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {100,100};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {100,100};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {99,100};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 412784747;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	int t0[] = {1,220,150};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {70,70,50};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {70,70,50};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {70,70,50};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 291495139;
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	int t0[] = {2,2,70,159};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {100,20,21,52};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {100,20,29,45};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {100,22,39,30};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 139586270;
	all_right = KawigiEdit_RunTest(8, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING






//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;

const string FIRST = "Ciel";
const string SECOND = "Liss";
const string DRAW = "Draw";

class FoxAndFencing {
public:
    string WhoCanWin(int mov1, int mov2, int rng1, int rng2, int d) {
        rng1 += mov1;
        rng2 += mov2;
        if (d <= rng1) return FIRST;
        if (d + mov1 <= rng2) return SECOND;
        
        if (mov1 == mov2) return DRAW;
        
        if (mov1 > mov2){
        	int x = rng1 - mov2;
        	if (x <= rng2) return DRAW;
        	return FIRST;
        }
        
        
        if (mov2 > mov1){
        	int x = rng2 - mov1;
        	if (x <= rng1) return DRAW;
        	return SECOND;
        }
        
        assert(false);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, string p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	FoxAndFencing *obj;
	string answer;
	obj = new FoxAndFencing();
	clock_t startTime = clock();
	answer = obj->WhoCanWin(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p5 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	string p5;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 58;
	p2 = 1;
	p3 = 58;
	p4 = 2;
	p5 = "Ciel";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 1;
	p2 = 1;
	p3 = 100;
	p4 = 50;
	p5 = "Liss";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 1;
	p2 = 1;
	p3 = 100;
	p4 = 150;
	p5 = "Draw";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 100;
	p1 = 100;
	p2 = 100;
	p3 = 100;
	p4 = 100000000;
	p5 = "Draw";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100;
	p1 = 1;
	p2 = 100;
	p3 = 1;
	p4 = 100000000;
	p5 = "Ciel";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 100;
	p1 = 1;
	p2 = 100;
	p3 = 250;
	p4 = 100000000;
	p5 = "Draw";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 100;
	p1 = 1;
	p2 = 100;
	p3 = 150;
	p4 = 100000000;
	p5 = "Ciel";
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	p0 = 100;
	p1 = 50;
	p2 = 100;
	p3 = 1;
	p4 = 100000000;
	p5 = "Ciel";
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 8 -----
	p0 = 100;
	p1 = 150;
	p2 = 100;
	p3 = 1;
	p4 = 100000000;
	p5 = "Draw";
	all_right = KawigiEdit_RunTest(8, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING






//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int MOD = 1000000009;

class TheExperiment {
string res;
int dp[310][310][2];
int sum[310];

void ADD(int& x,int y){
	if ((x += y) >= MOD) x -= MOD;
}




public:
    int countPlacements(vector <string> v, int M, int L, int A, int B) {
    	for (int i = 0; i < (int)v.size(); i++)
    		res += v[i];
    	
    	int n = res.size();
    	for (int i = 0; i < n; i++)
    		sum[i+1] = sum[i] + res[i] - '0';
    	memset(dp,0,sizeof(dp));
    	
    	dp[0][0][0] = 1;
  
    	for (int i = 0; i < n; i++)
    		for (int j = 0; j <= M; j++){
    			cerr << i <<" "<<j<<" "<<dp[i][j][0] <<" "<<dp[i][j][1] << endl;
    			ADD(dp[i+1][j][0],dp[i][j][0]);
    			for (int k = i; k < n && k < i+L; k++){
    				if (!(A <= sum[k+1] - sum[i] && sum[k+1] - sum[i] <= B)) continue;
    				cerr <<"!!"<<i <<" "<<k << endl;
    				ADD(dp[k+1][j+1][!(k == i+L-1)],dp[i][j][0]);
    				ADD(dp[k+1][j+1][0],dp[i][j][1]);
    			}
    		}
    		
    	return dp[v.size()][M][0];
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, int p3, int p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	TheExperiment *obj;
	int answer;
	obj = new TheExperiment();
	clock_t startTime = clock();
	answer = obj->countPlacements(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	
	{
	// ----- test 0 -----
	string t0[] = {"341156"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 3;
	p3 = 6;
	p4 = 10;
	p5 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"999112999"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 4;
	p3 = 21;
	p4 = 30;
	p5 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 2;
	p3 = 2;
	p4 = 3;
	p5 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"59059","110","1132230231"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 5;
	p3 = 10;
	p4 = 20;
	p5 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"111111111111111111111111","111111111111111111111111111","11111111111111111111111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	p2 = 8;
	p3 = 4;
	p4 = 2700;
	p5 = 418629948;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

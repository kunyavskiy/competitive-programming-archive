#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


struct vec{
	int x, y, id;
	vec(){};
	vec(int x, int y, int id):x(x), y(y), id(id){};
	int hpl() const {
		if (y < 0) return -1;
		if (y > 0) return 1;
		if (x < 0) return -1;
		return 1;
	}
};

bool operator<(const vec& a, const vec& b) {
	if (a.hpl() != b.hpl())
		return a.hpl() < b.hpl();
	return a.x * b.y - a.y * b.x < 0;
}

class TrianglePainting {
public:
    double expectedArea(vector <int> x1, vector <int> y1, vector <int> x2, vector <int> y2, vector <int> prob) {
        vector<vec> v;
        int n = (int)x1.size();
        for (int i = 0; i < n; i++) {
        	if (x1[i] * y2[i] - x2[i] * y1[i] < 0) {
        		swap(x1[i], x2[i]);
        		swap(y1[i], y2[i]);
        	}
        	v.pb(vec(x1[i], y1[i], i));
        	v.pb(vec(-x2[i], -y2[i], i));
        	v.pb(vec(x2[i] - x1[i], y2[i] - y1[i], i));
        }
        sort(v.begin(), v.end());
        
        double ans = 0;
        for (int i = 0; i < 3 * n; i++) {
        	double expy = v[i].y / 2.0;
        	for (int j = 0; j < i; j++)
        		expy += v[j].y * (v[j].id == v[i].id ? 1 : prob[v[j].id] / 100.0);
        	ans += expy * v[i].x * prob[v[i].id] / 100.0;
        }
        
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, vector <int> p4, bool hasAnswer, double p5) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}";
	cout << "]" << endl;
	TrianglePainting *obj;
	double answer;
	obj = new TrianglePainting();
	clock_t startTime = clock();
	answer = obj->expectedArea(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p5 - answer) <= 1e-9 * max(1.0, fabs(p5));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	double p5;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,-2,-4};
	p1 = {2,3,-1};
	p2 = {2,2,-2};
	p3 = {-1,-1,1};
	p4 = {100,100,100};
	p5 = 52.5;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {1,-2,-4};
	p1 = {2,3,-1};
	p2 = {2,2,-2};
	p3 = {-1,-1,1};
	p4 = {50,50,50};
	p5 = 15.0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {1};
	p1 = {1};
	p2 = {1};
	p3 = {-1};
	p4 = {1};
	p5 = 0.01;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {1,1,1,1,1,1,1,1,1,1};
	p1 = {-1,1,-1,1,-1,1,-1,1,-1,1};
	p2 = {1,1,1,1,1,1,1,1,1,1};
	p3 = {1,-1,1,-1,1,-1,1,-1,1,-1};
	p4 = {10,20,30,40,50,60,70,80,90,100};
	p5 = 31.899999999999995;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {-6,-2,-10,9,8,-1,10,5,7,3};
	p1 = {-5,2,-5,6,6,-10,8,7,-4,-5};
	p2 = {5,-1,-1,-8,6,7,10,-6,6,3};
	p3 = {0,-5,-7,4,10,0,10,-3,-3,-4};
	p4 = {71,100,43,59,51,41,11,53,3,27};
	p5 = 940.1964999999999;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {34,-71,19,78,69,-73,27,64,-100,70,-87,50,8,-97,46,-46,-30,-40,-30,-23,77,81,48,93,-40,70,37,-66,53,-87,-85,38,-90,63,-16,24,-2,-60,-88,67,-56,-8,-80,-19,-84,35,95,-24,-26,-15};
	p1 = {58,-24,-80,33,-98,61,99,79,-34,29,-1,-70,70,90,43,25,-50,-54,73,18,36,8,41,3,26,-6,-80,-22,65,33,-100,-1,80,-19,-6,-8,-4,-86,-43,-34,0,-93,-61,92,74,-77,32,-78,-56,-21};
	p2 = {-78,-100,-1,27,67,-31,-82,-24,44,-26,12,36,-36,-71,-84,3,59,28,-26,-79,-47,56,-75,-44,-85,-72,56,53,-27,53,-19,-65,14,62,96,-44,12,-20,-57,83,59,71,85,-62,21,24,-38,20,52,-64};
	p3 = {90,-41,79,18,7,-85,-88,-16,12,38,-7,12,-27,-43,-30,-93,48,-19,58,54,70,73,81,89,-35,-75,63,-73,66,-90,-25,44,-53,59,-14,83,18,-35,-81,49,-11,-63,-87,-92,-83,-43,60,-42,5,-96};
	p4 = {9,61,1,16,78,4,12,1,17,4,30,28,13,6,4,14,11,6,55,9,66,5,14,8,70,3,2,6,3,15,8,1,2,12,1,20,37,1,3,66,3,11,2,1,21,2,1,1,27,11};
	p5 = 306025.109;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

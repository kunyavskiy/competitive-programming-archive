#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <ctime>
#define pb push_back
using namespace std;

const int MOD = 1000000009;


class FleaCircus {

vector<int> p;
int n;
vector<int> cyc;
vector<bool> used;


void read(vector<string>& _s){
	string s = "";
	for (int i = 0; i < (int)_s.size(); i++)
		s += _s[i];
	stringstream str(s);
	int id;
	while (str >> id)
		p.pb(id);
	n = p.size();
}

int dp[2600];

long long calc2(int len,int cnt){
	return (len * 1LL * (cnt-1)) % MOD;
}

long long calc4(int len,int cnt){
	long long res = 1;
	res = (res * (cnt-1)) % MOD;
	res = (res * (cnt-2)) % MOD;
	res = (res * (cnt-3)) % MOD;
	
	res = (res * len) % MOD;
	res = (res * len) % MOD;
	res = (res * len) % MOD;
	
	return res;
}

int solve(int cnt,int len){
	cerr << cnt <<" "<<len<< endl;
	memset(dp,0,sizeof(int)*(cnt+10));
	dp[0] = 1;
	for (int i = 0; i < cnt; i++){
		cerr << dp[i] <<"/"<<dp[3]<<" ";
		if (len % 2 == 1) dp[i+1] = (dp[i] + dp[i+1])%MOD;
		if (len % 2 == 1) dp[i+2] = (dp[i+2] + dp[i]*calc2(len,cnt-i)) % MOD;
		dp[i+4] = (dp[i+4] + dp[i]*calc4(len,cnt-i))%MOD;		
	}	
	cerr << dp[cnt] << endl;
	return dp[cnt];
}


public:
	int countArrangements(vector <string> _s) {
		read(_s);
		used.assign(n,false);
		for (int i = 0; i < n; i++)
			if (!used[i]){
				int len = 1;
				used[i] = true;
				for (int j = p[i]; !used[j]; j = p[j]){
					used[j] = true;
					len++;
				}  
				cyc.pb(len);
			}
		sort(cyc.begin(),cyc.end());
		int ans = 1;
		for (int i = 0; i < (int)cyc.size(); ){
			int j = i;
			for (;j < (int)cyc.size() && cyc[j] == cyc[i]; j++);
			ans = (ans *1LL* solve(j-i,cyc[i]));
			i = j;
		}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FleaCircus *obj;
	int answer;
	obj = new FleaCircus();
	clock_t startTime = clock();
	answer = obj->countArrangements(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"1 2 0 3"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"1 2 ","0 3"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"0 1 2"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"0 1 2 3 5 4"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"3 6 7 9 8 2 1","0 5 1 0 4"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"1 0 7 5 6 3 4 2"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 48;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

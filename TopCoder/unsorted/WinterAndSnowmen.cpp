#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int MOD = 1000000007;


class WinterAndSnowmen {

int dp[2][2048][4];

void add(int& a, int b){
	if ((a += b) >= MOD) a -= MOD;
}

public:
    int getNumber(int n, int m) {
    	int ans = 0;
        for (int bit = 0; bit < 11; bit++){
        	memset(dp, 0, sizeof(dp));
        	dp[0][0][0] = 1;
        	int maxx = 1<<(10-bit);
        	for (int i = 1; i <= max(n,m); i++){
        		for (int j = 0; j < maxx; j++)
        			for (int k = 0; k < 4; k++) if (dp[0][j][k]){
        				add(dp[1][j][k], dp[0][j][k]);
//        				eprintf("(%d, %d) -%d> (%d, %d)\n", j, k, i, j, k);
        				if (i <= n) {
        					add(dp[1][j ^ (i >> (bit+1))][k ^ ((i >> bit) & 1)], dp[0][j][k]);        					
//	        				eprintf("(%d, %d) -%d> (%d, %d)\n", j, k, i, (j ^ (i >> (bit+1))), (k ^ ((i >> bit) & 1)));
        				}
        				if (i <= m) {
        					add(dp[1][j ^ (i >> (bit+1))][k ^ (((i >> bit) & 1) << 1)], dp[0][j][k]);        					
//	        				eprintf("(%d, %d) -%d> (%d, %d)\n", j, k, i, (j ^ (i >> (bit+1))), k ^ (((i >> bit) & 1) << 1));
        				}

        			}
        		for (int j = 0; j < maxx; j++)
        			for (int k = 0; k < 4; k++)
        			   dp[0][j][k] = dp[1][j][k], dp[1][j][k] = 0;        		
        	}
//        	eprintf("bit = %d, (%d,%d,%d,%d)\n", bit, dp[0][0][0],dp[0][0][1],dp[0][0][2],dp[0][0][3]);
        	add(ans, dp[0][0][2]);
        }
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	WinterAndSnowmen *obj;
	int answer;
	obj = new WinterAndSnowmen();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 5;
	p2 = 74;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7;
	p1 = 4;
	p2 = 216;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 47;
	p1 = 74;
	p2 = 962557390;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING






//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

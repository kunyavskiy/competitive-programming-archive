#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


class RandomFlights {
vector<int> x, y;

double len(int i, int j) {
	int dx = x[i] - x[j];
	int dy = y[i] - y[j];
	return sqrt(dx * dx + dy * dy);
}



public:
    double expectedDistance(vector <int> _x, vector <int> _y, vector <string> _g) {
    	x = _x, y = _y;
    	int n = x.size();
        vector<vector<double>> g(n, vector<double>(n, 1e100));
        for (int i = 0; i < n; i++)
        	for (int j = 0; j < n; j++)
        		if (i == j) g[i][j] = 0;
        		else if (_g[i][j] == '1') g[i][j] = len(i, j);
        
        for (int k = 0; k < n; k++)
        	for (int i = 0; i < n; i++)
        		for (int j = 0; j < n; j++)
        			g[i][j] = min(g[i][j], g[i][k] + g[k][j]);
        			
        vector<int> color(n);
        for (int i = 0; i < n; i++)
        	color[i] = i;
        	
        	
        for (int i = 0; i < n; i++)
        	for (int j = i+1; j < n; j++)
        		if (color[i] != color[j] && g[i][j] < 1e50) {
        		     int c2 = color[j];
        		     for (int k = 0; k < n; k++)
        		     	if (color[k] == c2)
        		     		color[k] = color[i];
        		}
        printf("%d %d %d\n", color[0], color[1], color[2]);
        		
        if (color[0] == color[1]) return g[0][1];
        		
/*        vector<int> cid(n);
        int cc = 0;
        for (int i = 0; i < n; i++)
        	if (uc[i])
        		cid[i] = cc++;*/
        		
		vector<int> mask(n);
		vector<double> cost(n);
		
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++)
				if (g[i][j] < 1e100) 
					mask[i] |= (1<<j), cost[i] += g[i][j];
			cost[i] /= __builtin_popcount(mask[i]);
			if (mask[i] & 2) cost[i] = g[i][1];
		}        	
		
		vector<double> dp(1<<n, 1e100);
		for (int i = (1<<n)-1; i >= 0; i--) {
			if (!(i & 1)) continue;
			if (i & 2) {dp[i] = 0; continue;}
			int cnt = __builtin_popcount(i);
			dp[i] = 0;
			for (int j = 0; j < n; j++) {
				if (i & (1<<j)) continue;
				double ecost = 0;
				for (int k = 0; k < n; k++)
					if (i & (1<<k)) ecost += len(k, j);
				ecost /= cnt;
				ecost += cost[j];
				ecost += dp[i | mask[j]];
				dp[i] += ecost;
			}
			dp[i] /= n - cnt;
		}
		return cost[0] + dp[mask[0]];
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <string> p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	RandomFlights *obj;
	double answer;
	obj = new RandomFlights();
	clock_t startTime = clock();
	answer = obj->expectedDistance(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	vector <string> p2;
	double p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {7,10,9};
	p1 = {1,3,3};
	p2 = {"000","001","010"};
	p3 = 3.7169892001050897;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {4,1,5,6,6};
	p1 = {1,5,10,3,4};
	p2 = {"00110","00101","11000","10001","01010"};
	p3 = 8.927446638338974;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {7,10,9,7,7};
	p1 = {1,3,3,6,4};
	p2 = {"00001","00000","00010","00100","10000"};
	p3 = 6.2360162308285005;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {97,27,20,34,30,37,65,21,74,27,84,79,15,78,16,7,11,24};
	p1 = {1,72,20,73,58,55,45,19,48,4,33,22,25,95,100,85,65,53};
	p2 = {"000000000000000100","001010000001000000","010010000000000000","000000000000100001","011000000001000000","000000001000000010","000000000000010000","000000000000000100","000001000100001010","000000001000000010","000000000000100000","010010000000000000","000100000010000001","000000100000000000","000000001000000010","100000010000000000","000001001100001000","000100000000100000"};
	p3 = 255.25627726422454;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {35,8,71,81,43,76,55,15,72,39,99,23,14,77,47,43,60,67};
	p1 = {68,96,98,16,7,74,52,63,98,77,52,93,52,4,56,11,75,63};
	p2 = {"000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000","000000000000000000"};
	p3 = 138.0804889521365;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int mod = 1000000007;

int add(int a,int b){
	return (a + b) % mod;
}


int mult(int a,int b){
	return (a * 1LL * b) % mod;
}

int down(int x,int bit){
	if (x & (1<<bit))
		return (1<<bit)-1;
	return x;
}

class DefectiveAddition {


public:
    int count(vector <int> v, int n) {
    	cerr <<"!!!!!"<<endl
    	sort(v.begin(),v.end());
    	if (v.back() == 0)
    		return n == 0;
    	int bit = 31 - __builtin_clz(v.back());
    	int x = 0;
    	vector<int> v2;
    	for (int i = 0; i < (int)v.size(); i++){
    		v2.pb(v[i] & ~(1<<bit));
    		x ^= v[i];
    	}
    	x &= 1<<bit;
    	int ans = 0;
    	   	
    	if ((n & (1<<bit)) == x)
    		ans = count(v2,n & ~(1<<bit));
    		
    	int a[4];
    	// 0 - even
    	// 1 - odd
    	// 2 - all even
    	// 3 - all odd
    	a[0] = a[1] = a[3] = 0;
    	a[2] = 1;
    	
    	for (int i = 0; i < (int)v.size(); i++){
    		int b[3];
    		b[0] = b[1] = b[2] = b[3] = 0;
    		if (!(v[i] & (1<<bit)){
    			b[0] = mult(a[0],down(v[i],bit));
    			b[1] = mult(a[1],down(v[i],bit));
    			b[2] = mult(a[2],down(v[i],bit));
    			b[3] = mult(a[3],down(v[i],bit));
    		}
    		if (v[i] & (1<<bit)){
    			b[1] = add(b[1],mult(a[0],(v[i]^(1<<bit))));
    			b[0] = add(b[0],mult(a[1],(v[i]^(1<<bit))));
    			b[3] = add(b[3],mult(a[2],(v[i]^(1<<bit))));
    			b[2] = add(b[2],mult(a[3],(v[i]^(1<<bit))));
    			b[1] = add(b[1],a[3]);
    			b[0] = add(b[0],a[2]);
   			
    		}
    		a[0] = b[0];
    		a[1] = b[1];
    		a[2] = b[2];
    		a[3] = b[3];
    	}    	  	    		
    	    		    		    		
    	return add(ans, a[!!(n&(1<<bit))]);
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	DefectiveAddition *obj;
	int answer;
	obj = new DefectiveAddition();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	int t0[] = {2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 6;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {4,5,7,11};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	p2 = 240;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 15;
	p2 = 1965600;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 16;
	p2 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 949480669;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

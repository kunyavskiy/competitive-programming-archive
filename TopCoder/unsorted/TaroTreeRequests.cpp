#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int MAXN = 210000;

typedef struct _node{
  _node *l, *r, *p, *pp;
  int size; bool rev;
  int val, maxval;
  _node();
  explicit _node(nullptr_t){
    l = r = p = pp = this;
    size = rev = 0;
    val = -1;
  }
  void push(){
    if (rev){
      l->rev ^= 1; r->rev ^= 1;
      rev = 0; swap(l,r);
    }
  }
  void update();
}* node;
node None = new _node(nullptr);
node v2n[MAXN];
_node::_node(){
  l = r = p = pp = None;
  size = 1; rev = false;
}
void _node::update(){
  size = (this != None) + l->size + r->size;
  val = max(val, max(l->maxval, r->maxval));
  l->p = r->p = this;
}
void rotate(node v){
  assert(v != None && v->p != None);
  assert(!v->rev); assert(!v->p->rev);
  node u = v->p;
  if (v == u->l)
    u->l = v->r, v->r = u;
  else 
    u->r = v->l, v->l = u;
  swap(u->p,v->p); swap(v->pp,u->pp);
  if (v->p != None){
    assert(v->p->l == u || v->p->r == u);
    if (v->p->r == u) v->p->r = v;
    else v->p->l = v;
  }
  u->update(); v->update();
}
void bigRotate(node v){
  assert(v->p != None);
  v->p->p->push();
  v->p->push();
  v->push();
  if (v->p->p != None){
    if ((v->p->l == v) ^ (v->p->p->r == v->p))
      rotate(v->p);
    else 
      rotate(v);
  }
  rotate(v);
}
inline void Splay(node v){
  while (v->p != None) bigRotate(v);
}
inline void splitAfter(node v){
  v->push();
  Splay(v);
  v->r->p = None;
  v->r->pp = v;
  v->r = None;
  v->update();
}
void expose(int x){
  node v = v2n[x];
  splitAfter(v);
  while (v->pp != None){
    assert(v->p == None);
    splitAfter(v->pp);
    assert(v->pp->r == None);
    assert(v->pp->p == None);
    assert(!v->pp->rev);
    v->pp->r = v;
    v->pp->update();
    v = v->pp;
    v->r->pp = None;
  }
  assert(v->p == None);
  Splay(v2n[x]);
}
inline void makeRoot(int x){
  expose(x);
  assert(v2n[x]->p == None);
  assert(v2n[x]->pp == None);
  assert(v2n[x]->r == None);
  v2n[x]->rev ^= 1;
}
node getRoot(int x) {
	node v = v2n[x];
	while (v->p != None)
		v = v->p;
	return v;
}

inline void link(int x,int y){
  makeRoot(x); v2n[x]->pp = v2n[y];
}

inline void cut(int x,int y){
  expose(x);
  Splay(v2n[y]);
  if (v2n[y]->pp != v2n[x]){
    swap(x,y);
    expose(x);
    Splay(v2n[y]);
    assert(v2n[y]->pp == v2n[x]);
  }
  v2n[y]->pp = None;
}


void print(node v) {
	if (v == None) return;
	print(v->l);
	eprintf("%d ", v->val);
	print(v->r);
}

class TaroTreeRequests {

int curValue;
vector<int> parent;

int genNextRandom() {
    curValue = (curValue * 1999LL + 17) % 1000003;
    return curValue;
}


int solve(int u, int v){
	if (u == v)
		return -1;
	expose(v);
	printf("!!! ");
	print(getRoot(v));
	eprintf("\n");
	Splay(v2n[u]);
	if (getRoot(v) == v2n[u]) {
		Splay(v2n[v]);
		expose(u);
		Splay(v2n[v]);
		return v2n[v]->maxval;
	}
	cut(u, parent[u]);
	parent[u] = v;
	link(u, v);
	makeRoot(0);
	return 0;	
}


public:
    ll getNumber(int N, int M, int startValue, int maxValue, int maxHeight) {
        curValue = startValue;
        parent = vector<int>(N);
        vector<int> value(N);
	    for (int i = 1; i < N; i++) {
        	value[i] = genNextRandom() % maxValue;
    	    parent[i] = max( 0, i - 1 - (genNextRandom() % maxHeight) );
	    }
	    
	    for (int i = 0; i < N; i++) {
	    	v2n[i] = new _node();
	    	v2n[i]->val = value[i];
	    	v2n[i]->update();
	   	}
	   	for (int i = 1; i < N; i++) {
	   		link(i, parent[i]);
	   	}
	    
	    long long ans = 0;
	    for (int i = 0; i < M; i++) {
	    	int u = genNextRandom() % N;
	    	int v = genNextRandom() % N;
	    	if (u > v)
	    		swap(u, v);
	        int temp = solve(u, v);
	        eprintf("%d %d %d\n", u, v, temp);
	    	ans += temp;
	    }
	    return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, ll p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	TaroTreeRequests *obj;
	ll answer;
	obj = new TaroTreeRequests();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	ll p5;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 4;
	p1 = 4;
	p2 = 47;
	p3 = 7;
	p4 = 2;
	p5 = 8LL;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 7;
	p1 = 10;
	p2 = 74;
	p3 = 7;
	p4 = 3;
	p5 = 40LL;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 10;
	p1 = 4;
	p2 = 103;
	p3 = 100;
	p4 = 2;
	p5 = 220LL;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 10000;
	p1 = 10000;
	p2 = 984848;
	p3 = 1000000;
	p4 = 2;
	p5 = 6632008328LL;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 200000;
	p1 = 200000;
	p2 = 7584;
	p3 = 948984;
	p4 = 4;
	p5 = 75766570928LL;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

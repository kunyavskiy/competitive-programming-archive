#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


class Matching {
	vector<vector<int>> g;
	vector<int> mt;
	vector<int> bmt;
	vector<int> used;
public:
	Matching(int n, int m): g(n), mt(m, -1), bmt(n, -1), used(n, 0){};
	void add(int a, int b) {g[a].pb(b);}
	
	bool dfs(int v) {
		if (used[v]) return 0;
		used[v] = 1;
		for (int u : g[v]) {
			if (mt[u] == -1 || dfs(mt[u])) {
				mt[u] = v;
				bmt[v] = u;
				return 1;
			}
		}
		return 0;
	}
	bool match(){
		int n = (int)g.size();
		int cnt = 0;
		/*for (int i = 0; i < n; i++)
			for (int u : g[i])
				if (mt[u] == -1) {
					mt[u] = i;
					bmt[i] = u;
					cnt++;
				}*/
		for (int i = 0; i < n; i++) if (bmt[i] == -1) {
			used = vector<int>(n, 0);
			cnt += dfs(i);
		}
		return cnt == (int)mt.size();
	}
};

class FoxMeeting {

vector<vector<int>> dst;
vector<int> foxes;

bool check(int v, int len) {
	//eprintf("v = %d, len = %d\n", v, len);
	int n = (int)dst.size();
	vector<int> used;
	used.pb(v);
	for (int i : foxes) {
		if (dst[i][v] <= len) continue;
		vector<pair<int, int>> tmp;
		for (int j = 0; j < n; j++) {
		    if (dst[i][j] + dst[j][v] == dst[i][v]) {
		    	tmp.pb(mp(dst[i][j], j));
			}
		}
		sort(tmp.begin(), tmp.end());
		assert(tmp.back().first > len);
		int j;
		for (j = 0; tmp[j].first <= len; j++);
		j--;
		for (; j <(int) tmp.size(); j++)
			used.pb(tmp[j].second);
	}
	sort(used.begin(), used.end());
	used.erase(unique(used.begin(), used.end()), used.end());
	
	//for (int x : used)
	//	eprintf("used: %d\n", x);
	
	Matching solver(n, (int)used.size());
	for (int i : foxes)
		for (int j = 0; j < (int)used.size(); j++)
			if (dst[i][used[j]] <= len) {
				//eprintf("edge: %d,%d\n", i, j);
				solver.add(i, j);
			}
	return solver.match();	
}

int solve(int v) {
	int l = -1;
	int r = 1e9;
	while (r - l > 1) {
		int m = (l + r) / 2;
		if (check(v, m))
			r = m;
		else
			l = m;
	}
	return r;
}

public:
    int maxDistance(vector <int> A, vector <int> B, vector <int> L, vector <int> foxes) {
       for (int& x : foxes) x--;
       this->foxes = foxes;
       int n = (int)A.size() + 1;
       dst = vector<vector<int>>(n, vector<int>(n, 1e9));
       for (int i = 0; i < n - 1; i++) {
       	 --A[i],--B[i];
         dst[A[i]][B[i]] = dst[B[i]][A[i]] = L[i];
       }
       for (int i = 0; i < n; i++)
       	 dst[i][i] = 0;
       for (int k = 0; k < n; k++)
       	 for (int i = 0; i < n; i++)
       	   for (int j = 0; j < n; j++)
       	   	 dst[i][j] = min(dst[i][j], dst[i][k] + dst[k][j]);
       //printf("%d\n", check(0, 10));
       //return -1;
       int ans = 1e9;
       for (int i = 0; i < n; i++) {
       	  int res = solve(i);
       	  ans = min(ans, res);
       }
       return ans; 
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxMeeting *obj;
	int answer;
	obj = new FoxMeeting();
	clock_t startTime = clock();
	answer = obj->maxDistance(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	int p4;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1};
	p1 = {2};
	p2 = {5};
	p3 = {1,2};
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {1,2};
	p1 = {2,3};
	p2 = {1,1};
	p3 = {1,3};
	p4 = 1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {1,2};
	p1 = {2,3};
	p2 = {1,1};
	p3 = {1,2,3};
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {10,8,3,7,2,6,9,1,4};
	p1 = {5,5,8,10,5,5,6,10,3};
	p2 = {71846,10951,42265,37832,29439,95676,83661,28186,21216};
	p3 = {1,2,3,4,5,6,7,8,9,10};
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {8,15,22,24,2,25,13,26,18,4,9,29,1,12,3,16,14,21,19,27,17,7,20,10,30,11,6,5,23};
	p1 = {28,28,8,8,28,28,25,2,13,24,24,22,22,29,4,22,8,4,1,24,21,14,18,16,13,21,14,1,25};
	p2 = {79374,40629,43195,73589,24200,63937,35339,7598,65109,51764,11142,84017,51078,58051,81387,22035,34883,92710,52283,57337,79309,3383,41904,35839,38242,43208,82062,24676,71838};
	p3 = {3,5,7,9,10,14,17,19,20,21,24,25,28};
	p4 = 107013;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {34,14,22,9,24,19,11,37,33,21,5,30,1,43,7,31,45,27,6,12,13,35,23,47,49,50,26,40,16,10,48,25,29,15,28,46,4,20,44,17,39,32,38,2,42,8,36,3,41};
	p1 = {18,18,18,14,9,34,9,24,34,11,18,14,21,21,43,1,22,7,1,30,14,33,13,18,9,5,1,1,26,19,50,33,50,40,29,48,50,37,16,40,48,14,30,22,47,37,7,50,6};
	p2 = {22051,11109,85275,6691,43705,47374,27748,5411,62549,84079,89542,38006,82198,24083,16847,66335,3542,72495,37378,73973,85703,51682,68688,94295,31337,90071,99317,63484,43244,99079,55857,34503,79709,82140,91137,27033,91599,61168,52345,49569,58919,38133,43361,40718,2115,79278,88841,40966,42023};
	p3 = {5,12,13,18,23,27,28,29,32,33,34,35,36,37,40,42,43,47,48,49,50};
	p4 = 89342;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


class FarStrings {

int cost[30][30];

bool check(string t, string s, int cnt){
	memset(cost, 1, sizeof(cost));
	cost[0][0] = 0;
	for (int i = 0; i <= (int)t.size(); i++)
		for (int j = 0; j <= (int)s.size(); j++){
			if (i != (int)t.size()) cost[i+1][j] = min(cost[i+1][j], cost[i][j] + 1);
			if (j != (int)s.size()) cost[i][j+1] = min(cost[i][j+1], cost[i][j] + 1);
			if (i != (int)t.size() && j != (int)s.size()) cost[i+1][j+1] = min(cost[i+1][j+1], cost[i][j] + (t[i] != s[j]));
		}
	int maxcost = t.size(), mincost = t.size();
	
	for (int i = 0; i <= (int)t.size(); i++){
		mincost = min(mincost, cost[i][s.size()] + abs(i - (int)s.size()));
		maxcost = min(maxcost, cost[i][s.size()] + abs(i - (int)s.size()) + (int)t.size() - i);
//		eprintf("%d %d %d\n", i, cost[i][s.size()] + abs(i - (int)s.size()), cost[i][s.size()] + abs(i - (int)s.size()) + (int)t.size() - i);
	}
	
//	eprintf("%d %d\n", mincost, maxcost);
	
	return mincost <= cnt && cnt <= maxcost;
}

string find(string t, int cnt){
	string s = "";
	for (int i = 0; i < (int)t.size(); i++) {
//		eprintf("%s %s %d\n", t.data(), s.data(), cnt);
		s += 'a';
		while (!check(t, s, cnt)) {
			s[i]++;
			assert(s[i] <= 'z');
		}
	}
	return s;
}

public:
    vector <string> find(string t) {
//    	check("atan", "a", 1);
//    	return vector<string>();
        vector<string> res(t.size());
        for (int i = 0; i < (int)t.size(); i++)
        	res[i] = find(t, i+1);
        return res;
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, vector <string> p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	FarStrings *obj;
	vector <string> answer;
	obj = new FarStrings();
	clock_t startTime = clock();
	answer = obj->find(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p1[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	string p0;
	vector <string> p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = "atan";
	p1 = {"aaan","aaaa","aaba","babb"};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = "ir";
	p1 = {"ar","aa"};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = "aaa";
	p1 = {"aab","abb","bbb"};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = "bazinga";
	p1 = {"aazinga","aaainga","aaaanga","aaaaaga","aaaaaaa","aaaaaab","abbaabb"};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = "bcdab";
	p1 = {"acdab","aadab","aaaab","aaaaa","aaaca"};
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

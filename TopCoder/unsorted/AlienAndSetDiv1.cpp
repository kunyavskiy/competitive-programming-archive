#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int MOD = 1000000007;

void madd(int& a, int b){
	if ((a += b) >= MOD) a -= MOD;
}

class AlienAndSetDiv1 {

int dp[55][55][1030];
int n, k;

bool can(int c1, int c2, int mask){
    //eprintf("can(%d, %d, %d)\n", c1, c2, mask);
	vector<int> ones;
	
	for (int i = 0; i < k - 1; i++)
		if (mask & (1<<i)) 
		   ones.pb(--c2);
	return find(ones.begin(), ones.end(), c1) == ones.end();
}

int calc(int c1, int c2, int mask){
    //eprintf("%d %d %d\n", c1, c2, mask);
	if (c1 > n || c2 > n) return 0;
	int& res = dp[c1][c2][mask];
	if (c1 == n && c2 == n)
		res = 1;
	if (res != -1) return res;
	
	res = 0;
	if (can(c1, c2, mask)) madd(res, calc(c1 + 1, c2, (mask << 1) & ((1<<k)-1)));
	if (can(c2, c1, ~mask & ((1<<k)-1))) madd(res, calc(c1, c2 + 1, ((mask << 1) | 1) & ((1<<k)-1)));
	return res;
}


public:
    int getNumber(int _n, int _k) {
    	memset(dp, -1, sizeof(dp));
        n = _n;
        k = _k;
        return (2 * calc(_k, 0, 0)) % MOD;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	AlienAndSetDiv1 *obj;
	int answer;
	obj = new AlienAndSetDiv1();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	disabled = false;
	p0 = 2;
	p1 = 2;
	p2 = 2;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	disabled = false;
	p0 = 3;
	p1 = 1;
	p2 = 20;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	disabled = false;
	p0 = 4;
	p1 = 2;
	p2 = 14;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	disabled = false;
	p0 = 10;
	p1 = 7;
	p2 = 40;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <memory.h>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int MOD = 1000000007;

int pow(int a,int b){
	if (!b) return 1;
	if (b & 1) return (pow(a,b-1)*1LL*a)%MOD;
	int temp = pow(a,b/2);
	return (temp*1LL*temp)%MOD;
}

int inv(int a){
	return pow(a,MOD-2);
}

int add(int a,int b){
    return (a+b)%MOD;
}

int sub(int a,int b){
    return (a-b+MOD)%MOD;
}

int mult(int a,int b){
	return (a*1LL*b)%MOD;
}


class KingdomAndCities {

int c[55*55][55*55];

int conn[55][55];
int conn1[55][55];

void PreCalc(){
	c[0][0] = 1;
	for (int i = 0; i < 55*55; i++)
		for (int j = 0; j < 55*55; j++){
			if (i) c[i][j] = add(c[i][j], c[i-1][j]);
			if (i && j) c[i][j] = add(c[i][j],c[i-1][j-1]);
		}
			
	for (int i = 0; i < 55; i++)
		for (int j = 0; j < 55; j++){
			conn[i][j] = c[i*(i-1)/2][j];
			for (int i1 = 1; i1 < i-1; i1++)
				for (int j1 = 0; j1 <= j; j1++){
					conn[i][j] = sub(conn[i][j], mult(mult(c[i-1][i1-1], conn[i1][j1]),conn[i-i1][j-j1]));
				}
	}
}

int calc1(int N,int K,int param = 0){
	if (conn1[N][K] != -1)
		return conn1[N][K];
    int& ans = conn1[N][K];
	ans = mult(conn[N-1][K],(N-1)*(N-2)/2);
	int temp = ans;
	ans = 0;
	for (int j = 1; j < N-1; j++)
		for (int k = 0; k <= K; k++){
			int temp = 1;
			
			temp = mult(temp,c[N-2][j-1]);
			temp = mult(temp,conn[j][k]);
			temp = mult(temp,conn[N-j-1][K-k]);
			temp = mult(temp,j*(N-j-1));
					
			ans = add(ans,temp);
		}
	if (param)
		return add(ans,temp);
	return ans;
}

public:
	int howMany(int N, int M, int K) {
		K -= 2*M;
		if (K < 0) return 0;
		PreCalc();
		memset(conn1,-1,sizeof(conn1));
		if (M == 0)	return conn[N][K];
		if (M == 1)	return calc1(N,K,1);		
				
		int ans = calc1(N-1,K);
		
		ans = add(ans,mult(conn[N-2][K],(N-2)*(N-3)*(N-2)*(N-3)/4));
		
		
		for (int i = 1; i < N - 2; i++)
			for (int j = 0; j <= K; j++){
				int temp = 1;
			
				temp = mult(temp,c[N-3][i-1]);
				temp = mult(temp,conn[i][j]);
				temp = mult(temp,conn[N-i-2][K-j]);
				
				int b = i*(i-1)/2 + ((N-i-2)*(N-i-3))/2;
				
				int temp2 = sub((N-2)*(N-3)*(N-2)*(N-3)/4, b*b);
				
				if (j == 0)
					cerr << i <<" "<<temp2 << endl;
				
				ans = add(ans,mult(temp,temp2));
			}
			
	
		for (int i = 1; i < N - 2; i++)
			for (int j = 0; j <= K; j++){
				int temp = 1;
			
				temp = mult(temp,c[N-3][i-1]);
				temp = mult(temp,conn[i][j]);
				temp = mult(temp,calc1(N-i-1,K-j));
								
				int temp2 = i*(N-i-2);
				
				temp2 *= 2;
				
				ans = add(ans,mult(temp,temp2));
			}
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	KingdomAndCities *obj;
	int answer;
	obj = new KingdomAndCities();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 0;
	p2 = 3;
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 1;
	p2 = 4;
	p3 = 9;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 2;
	p2 = 11;
	p3 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	p1 = 0;
	p2 = 8;
	p3 = 45;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10;
	p1 = 2;
	p2 = 20;
	p3 = 150810825;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

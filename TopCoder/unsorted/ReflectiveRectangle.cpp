#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int MOD = 1000000007;

int mmul(int a, int b) {
	return (a * 1LL * b) % MOD;
}


class ReflectiveRectangle {

int sumsq(int max) {
	if ((max & 1) == 1) return 0;
	max = (max - 1) / 2;
	int res = (MOD + 1) / 3;
	res = (res * 1LL * (max + 1)) % MOD;
	res = (res * 1LL * (2*max + 1)) % MOD;
	res = (res * 1LL * (2*max + 3)) % MOD;
	return res;
}

int go(int h, const vector<int>& p, int ptr, int sign) {
	if (ptr == (int)p.size()) 
	   return (sumsq(h) * 1LL * sign) % MOD;
	return (go(h, p, ptr+1, sign) + go(h / p[ptr], p, ptr+1, mmul(MOD - sign, mmul(p[ptr], p[ptr])))) % MOD;
}

int calc(int h) {
	if (h == 0) return 1;
	h+=2;
	vector<int> primes;
	int h0 = h;
	for (int i = 2; i * i <= h; i++) {
		if (h % i == 0) {
			if (i != 2)
				primes.pb(i);
			while (h % i == 0) h /= i;
		}
	}
	if (h > 2) primes.pb(h);
	return go(h0, primes, 0, 1);
}

public:
    int findSum(int sizeA, int sizeB, int h) {
        return (((sizeA * 1LL * sizeA + sizeB * 1LL * sizeB) % MOD) * calc(h)) % MOD;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	ReflectiveRectangle *obj;
	int answer;
	obj = new ReflectiveRectangle();
	clock_t startTime = clock();
	answer = obj->findSum(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 3;
	p1 = 4;
	p2 = 0;
	p3 = 25;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 3;
	p1 = 3;
	p2 = 2;
	p3 = 180;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 13;
	p1 = 17;
	p2 = 1;
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 59325;
	p1 = 31785;
	p2 = 262142;
	p3 = 48032850;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 1000000;
	p1 = 1000000;
	p2 = 1000000000;
	p3 = 145972110;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

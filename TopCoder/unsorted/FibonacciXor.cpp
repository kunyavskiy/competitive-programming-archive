#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


const int MOD = 1000000007;

vector<int>& operator^=(vector<int>& a, const vector<int>& b){
	assert(a.size() == b.size());
	for (int i = 0; i < (int)a.size(); i++)
		a[i] ^= b[i];
	return a;
}

class FibonacciXor {

map<ll, vector<int>> v;
vector<ll> fib;

vector<int> calc(ll A){
	if (v.find(A) != v.end()) return v[A];
//    eprintf("%lld\n", A);
	
	for (int i = (int)fib.size() - 1; i >= 0; i--){
		if (A < fib[i]) continue;
//		eprintf("max for %lld is %lld (i = %d)\n", A, fib[i], i);
		vector<int> res = calc(fib[i] - 1);
		res ^= calc(A - fib[i]);
		assert(res[i] == 0);
		if ((A - fib[i] + 1) % 2 == 1)
			res[i] = 1;
		return v[A] = res;
	}
	assert(false);
}

public:
    int find(ll A, ll B) {
    	fib.pb(1);
    	fib.pb(2);
    	while (fib.back() < B) {
    		int sz = (int)fib.size();
    		fib.push_back(fib[sz-2] + fib[sz-1]);
    	}
    	v[0] = vector<int>(fib.size(), 0);
        vector<int> res = calc(A-1);
        vector<int> res2 = calc(B);
        res ^= res2;
        int p2 = 1;
        int ans = 0;
        for (int i = 0; i < (int)res.size(); i++){
        	if (res[i])
        		ans = (ans + p2) % MOD; 
        	p2 = (p2 + p2) % MOD;
        }
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, ll p0, ll p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	FibonacciXor *obj;
	int answer;
	obj = new FibonacciXor();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	ll p0;
	ll p1;
	int p2;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 1LL;
	p1 = 2LL;
	p2 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 3LL;
	p1 = 10LL;
	p2 = 25;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 1LL;
	p1 = 1000000000000000LL;
	p2 = 780431495;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

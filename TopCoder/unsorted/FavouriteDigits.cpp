#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <cassert>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class FavouriteDigits {

string N;
int digit1,digit2;
int count1,count2;

string ltos(long long n){
	string s = "";
	while (n){
		s = char('0'+n%10) + s;
		n /= 10;
	}
	if (s == "")
		return "0";
	return s;
}

long long stol(string s){
	long long res = 0;
	for (int i = 0; i < (int)s.size(); i++){
		res = 10*res + s[i] - '0';
	}
	return res;
}

bool check(string s,int i){
	int cnt1, cnt2;
	cnt1 = cnt2 = 0;
	bool any = false;
	for (int j = 0; j <= i; j++){
		if (s[j] != '0') any = true;
		if (any && digit1 == s[j] -'0') cnt1++;
		if (any && digit2 == s[j] -'0') cnt2++;
	}
	//cerr << s <<" "<<(min(count1,cnt1) + min(count2,cnt2) + ((int)s.size()-i-1) >= count1+count2)<< endl;
	return min(count1,cnt1) + min(count2,cnt2) + ((int)s.size()-i-1) >= count1+count2;
}

public:
	long long findNext(long long _N, int _digit1, int _count1, int _digit2, int _count2) {
		N = ltos(_N);
		digit1 = _digit1;
		digit2 = _digit2;
		count1 = _count1;
		count2 = _count2;
		while (N.size() <= 20)
			N = "0"+N;
		if (digit1 > digit2){
			swap(digit1,digit2);
			swap(count1,count2);
		}
		if (check(N,N.size()-1))
			return _N;
		for (int i = (int)N.size()-1; i >= 0; i--){
			for (N[i]++; N[i] <= '9'; N[i]++){
				if (check(N,i)){
					i++;
					for (;i < (int)N.size(); i++){
						N[i] = '0';
						while (!check(N,i))
							N[i]++;
					}
					//cerr << "!"<<N << endl;
					return stol(N);
				}
			}
		}
	assert(false);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, int p1, int p2, int p3, int p4, bool hasAnswer, long long p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	FavouriteDigits *obj;
	long long answer;
	obj = new FavouriteDigits();
	clock_t startTime = clock();
	answer = obj->findNext(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	int p1;
	int p2;
	int p3;
	int p4;
	long long p5;
	
	{
	// ----- test 0 -----
	p0 = 47ll;
	p1 = 1;
	p2 = 0;
	p3 = 2;
	p4 = 0;
	p5 = 47ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 47ll;
	p1 = 5;
	p2 = 0;
	p3 = 9;
	p4 = 1;
	p5 = 49ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 47ll;
	p1 = 5;
	p2 = 0;
	p3 = 3;
	p4 = 1;
	p5 = 53ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 47ll;
	p1 = 2;
	p2 = 1;
	p3 = 0;
	p4 = 2;
	p5 = 200ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 123456789012345ll;
	p1 = 1;
	p2 = 2;
	p3 = 2;
	p4 = 4;
	p5 = 123456789012422ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 92ll;
	p1 = 1;
	p2 = 1;
	p3 = 0;
	p4 = 0;
	p5 = 100ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

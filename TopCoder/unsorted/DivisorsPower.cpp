#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;

const ll INF = (ll)1.1e18;


class DivisorsPower {

ll d(ll n) {
	ll cnt = 0;
	for (ll i = 1; i*i <= n; i++) {
		if (n % i == 0) cnt+=2;
		if (n == i *i) cnt--;
	}
	return cnt;
}

ll mypow(ll a, int b){
	ll res = 1;
	for (int i = 0; i < b; i++) {
		if (res >= INF / a) res = INF;
		else res *= a;
	}
	return res;
}

ll root(ll n, int k) {
	ll res = pow(n, 1.0 / k);
	while (mypow(res, k) < n) res++;
	while (mypow(res, k) > n) res--;
	if (mypow(res, k) == n) return res;
	return -1;
}

public:
    ll findArgument(ll n) {
        for (int i = 62; i >= 2; i--) {
        	ll temp = root(n, i);
        	if (temp == -1) continue;
        	if (d(temp) == i) return temp;
        }
        return -1;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, ll p0, bool hasAnswer, ll p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	DivisorsPower *obj;
	ll answer;
	obj = new DivisorsPower();
	clock_t startTime = clock();
	answer = obj->findArgument(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	ll p0;
	ll p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 4LL;
	p1 = 2LL;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 10LL;
	p1 = -1LL;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 64LL;
	p1 = 4LL;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 10000LL;
	p1 = 10LL;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 2498388559757689LL;
	p1 = 49983883LL;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

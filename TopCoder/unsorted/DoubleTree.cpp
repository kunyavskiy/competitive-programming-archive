#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


const int inf = 1e9;
const int INF = 1e9;

const int MAXN = 10000;

class Flow {
	struct Edge {
		int c, to, next;
		Edge(int c, int to, int next) :c(c), to(to), next(next){}
	};
	
	vector<Edge> es;
	vector<int> fir;
	int n;
	
	public:
	
	Flow(int _n):es(), fir(_n, -1), n(_n){}
	
	void adde(int a, int b, int c){
//	    eprintf("%d %d %d\n", a, b, c);
		es.pb(Edge(c, b, fir[a]));
		fir[a] = (int)es.size()-1;
		es.pb(Edge(0, a, fir[b]));
		fir[b] = (int)es.size()-1;
		assert(c >= 0);
		assert(0 <= a && a < n);
		assert(0 <= b && b < n);
	}
	
	vector<bool> used;
	
	int dfs(int v, int to, int minv, int cur){
//	    eprintf("!%d %d %d\n", v, to, cur);
		if (v == to) return cur;
		if (used[v]) return 0;
		used[v] = true;
		for (int i = fir[v]; i != -1; i = es[i].next){
			if (!es[i].c) continue;
			if (es[i].c < minv) continue;
			int temp = dfs(es[i].to, to, minv, min(cur, es[i].c));
			if (temp > 0) {
				es[i].c -= temp;
			    es[i^1].c += temp;
			    return temp;
			}
		}		    
		return 0;
	}
	
	int flow(int s, int e){
	    int tot = 0;
	    for (int i = 1024; i > 0; i /= 2){
			while (true) {
		   		used = vector<bool>(n);
				int cur = dfs(s, e, i, INF);
				tot += cur;
				if (!cur) break;
			}
		}
		return tot;
	}
};


class DoubleTree {

vector<vector<int>> g[2];
vector<int> p[2];

void dfsp(int v, const vector<vector<int>>& g, vector<int>& ps){
	for (int u : g[v]) {
		if (u != ps[v]) {
			ps[u] = v;
			dfsp(u, g, ps);
		}
	}
} 

void getTree(const vector<int>& a, const vector<int>& b, vector<vector<int>>& g, vector<int>& p) {
	for (int i = 0; i < (int)a.size(); i++)
		g[a[i]].pb(b[i]), g[b[i]].pb(a[i]);
	p[0] = -1;
	dfsp(0, g, p);
}

void dfs(int v, const vector<vector<int>>& g, const vector<int>& p, vector<int>& cnt) {
	cnt[v]++;
	for (int u : g[v])
		if (u != p[v])
			dfs(u, g, p, cnt);
}

public:
    int maximalScore(vector <int> a, vector <int> b, vector <int> c, vector <int> d, vector <int> score) {
        int n = a.size() + 1;
        g[0] = g[1] = vector<vector<int>>(n);
        p[0] = p[1] = vector<int>(n);
        getTree(a, b, g[0], p[0]);
        getTree(c, d, g[1], p[1]);
        int best = 0;
        for (int t1 = 0; t1 < n; t1++)
        	for (int t2 = 0; t2 < n; t2++) {
        		vector<int> in(n, 0);
        		dfs(t1, g[0], p[0], in);
        		dfs(t2, g[1], p[1], in);
        		if (in[t1] != 2 || in[t2] != 2) continue;
				Flow mf(n+2);
        		int cur = 0;
        		for (int i = 0; i < n; i++)
        			if (in[i] == 2) {
        				if (i != t1) mf.adde(i, p[0][i], inf);
        				if (i != t2) mf.adde(i, p[1][i], inf);
        				if (score[i] > 0) {
        					cur += score[i];
        					mf.adde(n, i, score[i]);
        				} else {
        					mf.adde(i, n + 1, -score[i]);
        				}
        			} else
        				mf.adde(i, n + 1, inf);
        		cur -= mf.flow(n, n+1);
        		best = max(best, cur);
        	}
         return best;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, vector <int> p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p4[i];
	}
	cout << "}";
	cout << "]" << endl;
	DoubleTree *obj;
	int answer;
	obj = new DoubleTree();
	clock_t startTime = clock();
	answer = obj->maximalScore(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	vector <int> p4;
	int p5;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {0,0,1};
	p1 = {1,3,2};
	p2 = {0,0,3};
	p3 = {1,3,2};
	p4 = {1000,24,100,-200};
	p5 = 1024;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,0,1};
	p1 = {1,3,2};
	p2 = {0,0,3};
	p3 = {1,3,2};
	p4 = {1000,24,100,200};
	p5 = 1324;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {0,0,1};
	p1 = {1,3,2};
	p2 = {0,0,3};
	p3 = {1,3,2};
	p4 = {-1000,-24,-100,-200};
	p5 = 0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {0,0,1};
	p1 = {1,3,2};
	p2 = {0,0,3};
	p3 = {1,3,2};
	p4 = {-1000,24,100,200};
	p5 = 200;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {0,0,1,1,2,2};
	p1 = {1,2,3,4,5,6};
	p2 = {0,0,1,1,2,2};
	p3 = {1,2,3,4,5,6};
	p4 = {-3,2,2,-1,2,2,-1};
	p5 = 5;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {0,0,1,1,2,2};
	p1 = {1,2,3,4,5,6};
	p2 = {0,0,0,0,0,0};
	p3 = {1,2,3,4,5,6};
	p4 = {-3,2,2,-1,2,2,-1};
	p5 = 5;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

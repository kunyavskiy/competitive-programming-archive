#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int MOD = 1000000007;

class Spacetsk {

int pow(int a,int b){
    if (!b)
        return 1;
    if (b & 1)
        return (pow(a,b-1)*1LL*a)%MOD;
    int temp = pow(a,b>>1);
    return (temp*1LL*temp)%MOD;
}

int inv(int a){
    return pow(a,MOD-2);
}

int f[2100];

public:
    int countsets(int L, int H, int K) {
        if (K == 1)
            return ((L+1)*1LL*(H+1))%MOD;
        f[0] = 1;
        for (int i = 1; i < 2100; i++)
            f[i] = (f[i-1]*1LL*i)%MOD;
        
        int ans = 0;
        
        for (int mv = K-1; mv <= H; mv++){
            int cnt = 0;
            
            int lb = (H+1)/mv;
            int rb = (H+1)/(mv+1);
            
            for (int c = 0; c <= L; c++){
                int la = (L-c+1)/mv;
                int ra = (L-c+1)/(mv+1);
                //cerr << mv <<" "<<c<<" +   : "<<lb <<" "<<rb <<" "<<la <<" "<<ra << endl;
                cnt = (cnt + (lb*1LL*(la+1)) - (rb * 1LL * (ra+1))) % MOD;
                
                 la = (c+1)/mv;
                 ra = (c+1)/(mv+1);
                 
                //cerr << mv <<" "<<c<<" -   : "<<lb <<" "<<rb <<" "<<la <<" "<<ra << endl;
                cnt = (cnt + (lb*1LL*la) - (rb * 1LL * ra)) % MOD;
            }
            
            //cerr << mv <<" "<<cnt << endl;
            int cnk = f[mv+1];
            cnk = (cnk * 1LL * inv(f[K]))%MOD;
            cnk = (cnk * 1LL * inv(f[mv-K+1])) % MOD;
            ans = (ans + cnt*1LL*cnk)%MOD;
        }
        
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
    cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
    cout << "]" << endl;
    Spacetsk *obj;
    int answer;
    obj = new Spacetsk();
    clock_t startTime = clock();
    answer = obj->countsets(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;
    
    int p0;
    int p1;
    int p2;
    int p3;
    
    {
    // ----- test 0 -----
    p0 = 1;
    p1 = 1;
    p2 = 2;
    p3 = 4;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 1 -----
    p0 = 1;
    p1 = 1;
    p2 = 1;
    p3 = 4;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    p0 = 2;
    p1 = 2;
    p2 = 1;
    p3 = 9;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    p0 = 2;
    p1 = 2;
    p2 = 2;
    p3 = 23;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    p0 = 5;
    p1 = 5;
    p2 = 3;
    p3 = 202;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 5 -----
    p0 = 561;
    p1 = 394;
    p2 = 20;
    p3 = 786097180;
    all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <cassert>
#include <string>
#include <memory.h>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;


class MagicalHats {

int dp[1600000];
int x[15];
int y[15];
int k,cnt,coin;
int st3[15];

int resx[15];
int resy[15];

void conv(int mask,int* t){
	for (int i = 0; i < cnt; i++){
		t[i] = mask % 3;
		mask /= 3;
	}
}

int calc(int mask){
	assert (mask <= 1600000);
	int& ans = dp[mask];
	if (ans != -1)
		return ans;
	ans = 0;
	int temp[14];
	memset(temp,0,sizeof(temp));
	conv(mask,temp);
	int have = 0;
	int got = 0;
	for (int i = 0; i < cnt; i++){
		if (temp[i] == 0){
			have++;
			ans = max(ans, min(calc(mask + st3[i]),calc(mask + st3[i]*2)));
		}
		if (temp[i] == 2)
			got++;
	}
	if (have == 0){
		if (got != coin)
			return ans = 1<<20;
		memset(resx,0,sizeof(resx));
		memset(resy,0,sizeof(resy));
		for (int i = 0; i < cnt; i++)
			resx[x[i]] += (temp[i] == 1), resy[y[i]] += (temp[i] == 1);
		for (int i = 0; i < 13; i++)
			if ((resx[i] & 1) || (resy[i] & 1))
				return ans = 1<<20;
		return ans = (k == cnt?got:0);
	}
	
	if (have + k == cnt){
		ans = max(ans,got);
		return ans;
	}
	return ans;
}

public:
	int findMaximumReward(vector <string> board, vector <int> coins, int numGuesses) {
		int n = board.size(); 
		int m = board[0].size();
		k = numGuesses;
		coin = coins.size();
		cnt = 0;
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				if (board[i][j] == 'H')
					x[cnt] = i, y[cnt] = j, cnt++;
					
		st3[0] = 1;
		for (int i = 1; i <= cnt; i++)
			st3[i] = st3[i-1] * 3;					
		memset(dp,-1,sizeof(dp));
		
		int temp = calc(0);	
		
		
		
		if (temp > cnt)
			return -1;
		
		int ans = 0;
		for (int i = 0; i < temp; i++)
			ans += coins[i];
		return ans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	MagicalHats *obj;
	int answer;
	obj = new MagicalHats();
	clock_t startTime = clock();
	answer = obj->findMaximumReward(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	string t0[] = {"H"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"HHH","H.H","HH."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	p3 = 9;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"HH","HH"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"HHH","HHH","H.H"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {13,13,13,13};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	p3 = 13;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"HHH","HHH","H.H"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {13,13,13,13};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 26;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"H.H.",".H.H","H.H."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {17};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	p3 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"HHH","H.H","HHH","H.H","HHH"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {33,337,1007,2403,5601,6003,9999};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	p3 = 1377;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {".............",".............",".............",".............",".............",".............",".....H.H.....","......H......",".....H.H.....",".............",".............",".............","............."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {22};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	p3 = 22;
	all_right = KawigiEdit_RunTest(7, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

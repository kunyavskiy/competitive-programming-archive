#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int MOD = 1000000007;


class TaroCheckers {

int dp[2][55][55][210];

void madd(int &a, int b){
	if ((a += b) >= MOD) a -= MOD;
}

public:
    int getNumber(vector <int> left, vector <int> right, int m) {
    	int n = (int)left.size();
        {
           vector<pair<int, int> > tmp(n);
           for (int i = 0; i < n; i++)
           	 tmp[i] = mp(left[i], right[i]);
           sort(tmp.begin(), tmp.end());
           for (int i = 0; i < n; i++)
           	  left[i] = tmp[i].first, right[i] = tmp[i].second;	
        }
        memset(dp, 0, sizeof(dp));
        
        dp[0][0][0][0] = 1;
        
        for (int col = 0; col < m; col++){
        	for (int fl = 0; fl <= n; fl++) {
        		int cntr = 0, cntl = 0;
        		for (int j = 0; j < fl; j++)
        			if (col >= m - right[j])
        				cntr++;
        		for (int j = 0; j < fl; j++)
        			if (col >= left[j])
        				cntl++;
        		for (int cr = 0; cr <= cntr; cr++) {
        			for (int emp = 0; emp <= col; emp++){
        				int my = dp[0][fl][cr][emp];
        				if (fl != n && col == left[fl] && emp)
            				madd(dp[0][fl+1][cr][emp - 1], (my * 1LL * emp) % MOD);
	        			if (fl != n && col >= left[fl]) dp[0][fl][cr][emp] = 0;
    	    			if (!dp[0][fl][cr][emp]) continue;
    	    			eprintf("%d %d %d %d [cntr = %d] --> %d\n", col, fl, cr, emp, cntr, my);
        				if (cr < cntr) madd(dp[1][fl][cr+1][emp], ((cntr - cr) * 1LL * my) % MOD);
        				madd(dp[1][fl][cr][emp], ((cntl - cntr) *1LL * my) % MOD);
        				madd(dp[1][fl][cr][emp+1], my % MOD);
//        				if (fl != n && col == left[fl])
//            				madd(dp[1][fl+1][cr][emp], my);
        			}
        		}
        	}
        	memcpy(dp[0], dp[1], sizeof(dp[0]));
        	memset(dp[1], 0, sizeof(dp[1]));
        }
        int ans = 0;
        for (int empty = 0; empty <= m; ++empty)
        	madd(ans, dp[0][n][n][empty]);
        		
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	TaroCheckers *obj;
	int answer;
	obj = new TaroCheckers();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	disabled = false;
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	disabled = false;
	int t0[] = {1,4,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,3,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	p3 = 6;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	disabled = false;
	int t0[] = {4,7,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7,4,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 11;
	p3 = 5760;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	disabled = false;
	int t0[] = {10,25,100,74};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {100,47,27,100};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 200;
	p3 = 796178974;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	disabled = false;
	int t0[] = {21,99,87,12,138,16,78,36,98,40,57,10,61,100,8,110,96,9,69,110,14,71};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {83,8,25,169,1,89,109,89,19,112,39,112,87,66,116,16,41,97,52,70,111,23};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 190;
	p3 = 235017573;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	disabled = false;
	int t0[] = {3,37,26,50,8,3,38,15,58,47,35,8,27,22,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {19,26,62,15,84,13,6,46,22,53,23,8,29,55,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 102;
	p3 = 528024858;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

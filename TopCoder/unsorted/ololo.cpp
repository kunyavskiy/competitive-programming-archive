#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


const int MAXN = 110000;

struct _node;
typedef _node* node;

struct _node{
    static node null;
    node l,r,p;
    int size;
    bool rev;
    node pp;
    _node(){
        l = r = p = pp = _node::null;
        size = 1;
        rev = 0;
    }
    _node(void*){
        l = r = p = pp = this;
        size = rev = 0;
    }
    void push(){
        if (rev){
            l->rev ^= 1;
            r->rev ^= 1;
            rev = 0;
            swap(l,r);
        }
    }
    void update(){
        size = (this != null) + l->size + r->size;
        l->p = r->p = this;
    }
};
                                    
node _node::null = new _node(NULL);
node v2n[MAXN];

void rotate(node v){
    node u = v->p;    
    if (v == u->l){
       u->l = v->r;
       v->r = u; 
    }
    else {
       u->r = v->l;
       v->l = u; 
    }          
    swap(u->p,v->p);
    swap(v->pp,u->pp);
    if (v->p != _node::null){
        if (v->p->r == u)
            v->p->r = v;
        else
            v->p->l = v;
    }                   
    u->update();
    v->update();
}

void bigRotate(node v){
    v->p->p->push();
    v->p->push();
    v->push();
    if (v->p->p == _node::null)
        rotate(v);
    else if ((v->p->l == v) ^ (v->p->p->r == v->p))
        rotate(v->p), rotate(v);
    else
        rotate(v), rotate(v);
}

inline void Splay(node v){
     while (v->p != _node::null)
        bigRotate(v);
}

inline void splitAfter(node v){
    v->push();
    Splay(v);
    v->r->p = _node::null;
    v->r->pp = v;
    v->r = _node::null;
    v->update();
}

void expose(int x){
   node v = v2n[x];
   splitAfter(v);
   while (v->pp != _node::null){
       splitAfter(v->pp);
       v->pp->r = v;
       v->pp->update();
       v = v->pp;
       v->r->pp = _node::null;        
   }
   Splay(v2n[x]);
}

inline void makeRoot(int x){
    expose(x);
    v2n[x]->rev ^= 1;
}

inline void link(int x,int y){
    makeRoot(x);
    makeRoot(y);
    v2n[x]->pp = v2n[y];
}


class TreeColoring {

int curValue;

int genNextRandom() {
    curValue = (curValue * 1999 + 17) % 1000003;
    return curValue;
}

vector<int> distance;
vector<int> parent;
vector<int> queryType;
vector<int> queryNode;

void generateInput() {
    for (int i = 0; i < N-1; i++) {
        distance[i] = genNextRandom() % maxDist;
    	parent[i] = genNextRandom();
        if (parent[i] < threshold) {
            parent[i] = i;
        } else {
            parent[i] = parent[i] % (i + 1);
        }

    for (int i = 0; i < Q; i++) {
        queryType[i] = genNextRandom() % 2 + 1;
        queryNode[i] = genNextRandom() % N;
    }
}


public:
    ll color(int N, int Q, int startSeed, int th, int) {
        
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, bool hasAnswer, ll p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	TreeColoring *obj;
	ll answer;
	obj = new TreeColoring();
	clock_t startTime = clock();
	answer = obj->color(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	ll p5;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 4;
	p1 = 6;
	p2 = 15;
	p3 = 2;
	p4 = 5;
	p5 = 7LL;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 4;
	p1 = 5;
	p2 = 2;
	p3 = 9;
	p4 = 10;
	p5 = 30LL;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 8;
	p1 = 8;
	p2 = 3;
	p3 = 5;
	p4 = 7;
	p5 = 6LL;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 14750;
	p1 = 50;
	p2 = 29750;
	p3 = 1157;
	p4 = 21610;
	p5 = 2537640LL;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 100000;
	p1 = 100000;
	p2 = 123456;
	p3 = 500000;
	p4 = 474747;
	p5 = 726915029831LL;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = 100000;
	p1 = 100000;
	p2 = 654321;
	p3 = 1000003;
	p4 = 1000003;
	p5 = 562600687570528LL;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

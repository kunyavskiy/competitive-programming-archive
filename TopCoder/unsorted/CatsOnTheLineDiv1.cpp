#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;

const int inf = 1e9;

class CatsOnTheLineDiv1 {

int dp[1100][1100];

public:
    int getNumber(vector <int> pos, vector <int> cnt, int t) {
    	int n = pos.size();
        vector< pair<int, int> > v(n);
        for (int i = 0; i < n; i++)
        	v[i] = mp(pos[i], cnt[i]);
        sort(v.begin(), v.end());
        for (int i = 0; i < n; i++)
        	pos[i] = v[i].first, cnt[i] = v[i].second;
        for (int i = 0; i <= n; i++)
        	for (int j = 0; j <= n; j++)
        		dp[i][j] = inf;
        dp[0][0] = -inf;
        for (int i = 0; i < n; i++) 
        	for (int j = 0; j <= i; j++) {
        		if (dp[i][j] == inf) continue;
        		int id = upper_bound(pos.begin(), pos.end(), pos[i] + 2 * t) - pos.begin();
        		dp[id][j+1] = min(dp[id][j+1], pos[i] + 2 * t);
        		if (max(dp[i][j], pos[i] - t) + cnt[i]  - 1 <= pos[i] + t) 
        			dp[i+1][j] = min(dp[i+1][j], max(dp[i][j], pos[i] - t) + cnt[i]);
        	}
        int ans = 0;
        while (dp[n][ans] == inf) ans++;
        return ans;
        
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	CatsOnTheLineDiv1 *obj;
	int answer;
	obj = new CatsOnTheLineDiv1();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {0};
	p1 = {7};
	p2 = 3;
	p3 = 0;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0};
	p1 = {6};
	p2 = 2;
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {4,7,47};
	p1 = {4,7,4};
	p2 = 1;
	p3 = 3;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {3,0,7,10};
	p1 = {3,7,4,5};
	p2 = 2;
	p3 = 2;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {-5,0,7};
	p1 = {47,85,10};
	p2 = 6;
	p3 = 1;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {-8,12,-15,-20,17,-5,7,10};
	p1 = {20,10,7,9,2,8,11,10};
	p2 = 2;
	p3 = 5;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

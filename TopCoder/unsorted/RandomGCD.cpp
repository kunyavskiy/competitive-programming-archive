#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


const int MOD = 1000000007;

class RandomGCD {

int pow(int a, int b) {
	if (!b) return !!a;
	if (b & 1) return (int)((pow(a, b - 1) * 1LL * a) % MOD);
	int temp = pow(a, b / 2);
	return (int)((temp * 1LL * temp) % MOD);
}

int get(int low, int high, int d) {
	low = (low + d - 1) / d;
	high = high / d;
	return max(0, high - low + 1);
}

void sub(int& a, int b){
	if ((a -= b) < 0) a += MOD;
}

public:
    int countTuples(int n, int K, int low, int high) {
        low = (low + K - 1) / K;
        high = high / K;
        if (low > high) return 0;
        
        int maxd = high - low + 1;
        vector<int> cnt(maxd + 1);
        for (int i = 1; i <= maxd; i++) 
        	cnt[i] = pow(get(low, high, i), n);
        
        vector<vector<int>> divs(maxd + 1);
        for (int i = 1; i <= maxd; i++)
        	for (int j = 2 * i; j <= maxd; j += i)
        		divs[j].pb(i);
        		
        for (int i = maxd; i >= 1; i--)
        	for (int k = 0; k < (int)divs[i].size(); k++)
        		sub(cnt[divs[i][k]], cnt[i]);
        
        sub(cnt[1], max(0, high - max(maxd + 1, low) + 1));
        return cnt[1];
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	RandomGCD *obj;
	int answer;
	obj = new RandomGCD();
	clock_t startTime = clock();
	answer = obj->countTuples(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	disabled = false;
	p0 = 2;
	p1 = 2;
	p2 = 2;
	p3 = 4;
	p4 = 3;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	disabled = false;
	p0 = 2;
	p1 = 100;
	p2 = 2;
	p3 = 4;
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	disabled = false;
	p0 = 1;
	p1 = 5;
	p2 = 5;
	p3 = 5;
	p4 = 1;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	disabled = false;
	p0 = 73824;
	p1 = 17347;
	p2 = 9293482;
	p3 = 9313482;
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	disabled = false;
	p0 = 222;
	p1 = 222;
	p2 = 222;
	p3 = 22222;
	p4 = 339886855;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	}
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

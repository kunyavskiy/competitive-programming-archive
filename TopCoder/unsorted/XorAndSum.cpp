#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#define pb push_back
#define mp make_pair      
using namespace std;
 
typedef long long ll;
typedef long double ld;


class XorAndSum {
public:
    long long maxSum(vector<long long> v) {
        vector<pair<ll,ll> > a;
        for (int i = 0; i < (int)v.size(); i++)
        	a.pb(mp(v[i],v[i]));
        	
        bool any = true;
        while (any){
           any = false;
           vector<bool> used(v.size(),0);
        	
           for (int i = 0; i < (int)a.size(); i++)
           	   a[i].second = a[i].first;
           	   
           sort(a.begin(),a.end());
        	
           for (int i = 60; i >= 0; i--){
        	int id = -1;
        	for (int j = 0; j < (int)a.size(); j++)
        		if (a[j].second & (1LL<<i)){
        		  id = j;
        		  break;
        		}
        	if (id == -1)
        	   continue;
        	used[id] = true;
        	for (int j = 0; j < (int)a.size(); j++){
        		if (used[j]) continue;
        		if (a[j].second & (1LL<<id))
        			a[j].second ^= a[id].second;
        		if (!(a[j].first & (1LL<<id))){
        			a[j].first ^= a[id].second;
        			any = true;
        		}
        	}        	
           }
        }
        ll ans = 0;
        for (int i = 0; i < (int)a.size(); i++)
        	ans += a[i].first;
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector<long long> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	XorAndSum *obj;
	long long answer;
	obj = new XorAndSum();
	clock_t startTime = clock();
	answer = obj->maxSum(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector<long long> p0;
	long long p1;
	
	{
	// ----- test 0 -----
	long long t0[] = {1ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	long long t0[] = {1ll,2ll,3ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	long long t0[] = {0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	long long t0[] = {2ll,3ll,5ll,7ll,11ll,13ll,17ll,19ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 233ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	long long t0[] = {123456789012345ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll,0ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1234567890123450ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	long long t0[] = {627ll,674ll,281ll,272ll,289ll,877ll,62ll,122ll,603ll,189ll,615ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10742ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	long long t0[] = {557ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 557ll;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING





//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!

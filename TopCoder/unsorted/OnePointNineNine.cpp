#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <cstdlib>
#include <cstdio>
#include <stack>
#include <algorithm>
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <iterator>
#include <functional>
#include <bitset>
#include <ctime>
#include <cassert>
#define pb push_back
#define mp make_pair      
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
using namespace std;
 
typedef long long ll;
typedef long double ld;


const int MOD = 1000000007;

class OnePointNineNine {
vector<int> x, y;
vector<int> comp;
int d;

bool can(int v, int u, bool strict = false) {	
	return ((x[v] - x[u]) * 1LL * (x[v] - x[u]) + (y[v] - y[u]) * 1LL * (y[v] - y[u])) <= d *1LL* d - strict;
}


void dfs(int v, int c) {
    //printf("%d %d\n", v, c);
	if (comp[v] != -1) return;
	comp[v] = c;
	for (int i = 0; i < (int)x.size(); i++)
		if (can(v, i))
			dfs(i, c);
}

public:
    int countSubsets(vector <int> _x, vector <int> _y, int _d) {
    	int n = _x.size();
        x = _x, y = _y, d = _d;
        vector<int> fib(n+1);
        fib[0] = 1;fib[1] = 2;
        for (int i = 2; i <= n; i++)
        	fib[i] = (fib[i-1] + fib[i-2]) % MOD;
        comp = vector<int>(n, -1);
        int cc = 0;
        for (int i = 0; i < n; i++)
        	if (comp[i] == -1)
        		dfs(i, cc++);
        		
        vector<int> cnt(cc, 1);        
        vector<bool> havesmall(cc, 0);
        for (int i = 0; i < n; i++){
        	cnt[comp[i]]++;
        	for (int j = i+1; j < n; j++) {
        		if (comp[i] != comp[j]) continue;
        		if (can(i, j, true)) {
        			havesmall[comp[i]] = true;
        		}
        		if (!can(i, j))
        			cnt[comp[i]]++;
        	}
        		
        }
        int res = 1;
        for (int i = 0; i < (int)cnt.size(); i++) {
        	if (!havesmall[i]) {
        		cnt[i] = 0;
        		for (int j = 0; j < n; j++)
        			cnt[i] += comp[j] == i;
//        		printf("%d->%d\n", cnt[i], fib[cnt[i]]);
        		cnt[i] = fib[cnt[i]];
        	}
        	res = (res * 1LL * cnt[i]) % MOD;
        }
        return res;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	OnePointNineNine *obj;
	int answer;
	obj = new OnePointNineNine();
	clock_t startTime = clock();
	answer = obj->countSubsets(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	int p3;
	
	// ----- test 0 -----
	disabled = true;
	p0 = {0,0,10,10};
	p1 = {0,10,0,10};
	p2 = 47;
	p3 = 5;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = true;
	p0 = {0,0,10,10};
	p1 = {0,10,0,10};
	p2 = 4;
	p3 = 16;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = true;
	p0 = {0,4,8};
	p1 = {0,3,6};
	p2 = 5;
	p3 = 5;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {0,4,8,20,25,30,35,40};
	p1 = {0,3,6,20,20,20,20,20};
	p2 = 5;
	p3 = 65;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = true;
	p0 = {4637,7770,9911,3887,310,8546,104,9820,6710,4128,8224,2492,8956,6162,3392,9736,1540,7744,3783,5451,3756,6153,4846,9852,2678,6500,4117,3994,9126,8950,4913,8598,5692,3400,133,4284,656,4742,8727,4904,338,7144,7447,8807,1985,6591,40,9614,1839,2724,391,1419,2404,9268,1490,3121,654,1337,7787,9269,9413,4515,7787,8622,6718,839,238,2490,253,1029,9286,5226,180,6451,7826,1707,5119,7238,3393,8980,7234,879,5481,703,3991,35,3205,2697,9462,4489,2074,7880,1909,150,2378,1555,5232,5959,8755,7679};
	p1 = {4026,2791,3044,4049,6759,6606,3440,8858,6954,2544,4778,2367,5113,8588,3772,4741,3693,5140,8822,8853,9934,6277,5097,285,1031,9872,1012,5883,8992,7257,8889,6558,9997,3868,7731,7508,3729,6398,4102,2054,4835,5707,4271,1676,9487,6336,9829,1058,9965,4998,1042,6320,7669,1893,6021,4211,8496,7585,6882,8410,5155,5869,3376,7173,5726,1574,8911,4192,8324,963,8867,7292,7127,4238,6796,6225,4143,7775,4312,965,5933,558,8642,268,7208,5688,267,4338,4023,7982,4535,545,7228,1884,1660,3241,6388,6572,6515,5912};
	p2 = 1;
	p3 = 976371285;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

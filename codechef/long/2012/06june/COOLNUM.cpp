#include <iostream>
#include <fstream>
#include <vector>
#include <set>
#include <map>
#include <string>
#include <cmath>
#include <cassert>
#include <ctime>
#include <algorithm>
#include <queue>
#include <memory.h>
#include <stack>
#define mp make_pair
#define pb push_back                     
#define setval(a,v) memset(a,v,sizeof(a))

#if ( _WIN32 || __WIN32__ )
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

using namespace std;

typedef long long ll;
typedef long double ld;

#ifdef LOCAL
    ld START = clock();
#endif



char outbuf[2000000];
int ptrout;
              

void print( const char* s){
    for (int i = 0; s[i]; i++)
        outbuf[ptrout++] = s[i];

    if (ptrout > 1900000 && outbuf[ptrout-1] == '\n'){
        --ptrout;
        outbuf[ptrout] = 0;
        puts(outbuf);
        ptrout = 0;
    }
}

struct tlong{
    vector<int> v;
    static const int BASE;
    static const int BASELEN;
    static char buf[1100];

    int operator[](int id) const{
        return v[id];
    }

    int& operator[](int id){
        return v[id];
    }

    int size() const{
        return v.size();
    }
    void push_back(int x){
        v.pb(x);
    }
    void print() const{
        int ptr = 0;
        sprintf(buf,"%dx",v.back());
        while (buf[ptr] != 'x')
            ptr++;       
        for (int i = size()-2; i >= 0; i--)
            sprintf(buf+ptr,"%0*d",BASELEN,v[i]),ptr+=BASELEN;
        buf[ptr] = 0;
        ::print(buf);
    }
    int getint(const char* from,const char* to){
        int x = 0;
        while (from != to){
            x = 10*x + (*(from++)-'0');
        }
        return x;
    }
    tlong& init(const char* buf){
        v.clear();
        for (int i = strlen(buf); i > 0; i-= BASELEN)
            v.pb(getint(buf+max(0,i-BASELEN),buf+i));
        return *this;
    }     
    bool operator<(const tlong& a) const{
        if (a.size() != size())
            return size() < a.size();
        for (int i = size()-1; i >= 0; i--)
            if (v[i] != a[i])
                return v[i] < a[i];
        return false;
    }
};

bool operator==(const tlong& a,const tlong& b){
    return !(a < b || b < a);
}

const int tlong::BASE = 100000;
const int tlong::BASELEN = 5;
char tlong::buf[1100];

tlong& operator*=(tlong& a,int b){
    int c = 0;
    int sz = a.size();
    for (int i = 0; i < sz || c; i++){
        if (i >= sz)
            a.pb(0);
        c += b*a[i]; 
        
        a[i] = c%tlong::BASE;
        c /= tlong::BASE; 
    }
    return a;
}                

vector<tlong> have;

namespace Precalc{

int p[10];
int st[10];
int mst[10];
int maxpos;

int cnt[10];

int sumdig[tlong::BASE];

bool check(const tlong& val,int sum,int st){
    int rsum = 0;
    int sz = val.size();
    for (int i = 0; i < sz; i++)
        rsum += sumdig[val[i]];
    int need = rsum - sum;
    if (need < st || need > 27)
        return false;
    memset(cnt,0,sizeof(cnt));
    for (int i = 0; i < sz; i++){
        int tmp = val[i];
        while (tmp){
            cnt[tmp%10]++;
            tmp /= 10;
        }
    }
    
    cnt[0] = 10;

    for (int i = 0; i < 10; i++)
        if (cnt[i])
        for (int j = i; j < 10; j++)
            if (cnt[j] - (i==j) > 0){
                int k = need-i-j;
                if (k < j || k >= 10)
                   continue;
                if (cnt[k] - (i==k) - (j==k) > 0)
                   return true;
            }
    return false;
}
                   
void go(tlong x,int pos,int sum,int nst){
    if (pos == maxpos){
        if (check(x,sum,nst))
            have.pb(x);
        return ;
    }
    for (int i = 0; i <= mst[pos]; i++){
        go(x,pos+1,sum,max(nst,(i+st[pos]-1)/st[pos]));
        x *= p[pos];
    }
}

void doit(int sum){
    maxpos = 0;

    int _sum = sum;   

    for (int i = 2; i <= sum; i++){
         if (sum % i)
            continue;
         p[maxpos] = i;
         st[maxpos] = 0;
         while (sum % i == 0){
            sum /= i;
            st[maxpos]++;
         }
         mst[maxpos] = st[maxpos] * 27;
         maxpos++;
    }

    tlong res;
    res.pb(1);

    go(res, 0,_sum, 0);
}


void Precalc(){
    for (int i = 0; i < tlong::BASE; i++){
        sumdig[i] = sumdig[i/10] + (i%10);
    }
    for (int i = 2; i <= 230; i++)
       doit(i);
    
    doit(234);
    doit(252);
    doit(256);
    #define h(x) have.pb(tlong().init(x)) 
    h("981393183197870664268660488318325947986612503106090643756251");
    h("49702706817949023541412289361489585767301427917234759401472");
    h("497979696531842015412219673699538776252269744873046875");
    h("76190893569371828358069610076029432766597270965576171875");
    h("15088072759391137907010407884436388193239887873867776");
    h("1264571209493919792932329772071279914698285872105504768");
    h("495787805769182879462176056439074998922189217107200180224");
    h("681891774500060616295940038037467847764323318111688774909952");
    h("76604462866808947590912718035514036518624765670311622283735143237");
    h("174519593578125865921612795855035588145106185337295601664");
    h("2584466066687019144886958356956314390792625733651359");
    h("6808928487289665795584001003868299151697419828199424");
    h("27037826384828919129362650928910007642285879069971054592");
    h("77857847946327109429887280961353298470764887482368");
    h("304865999987805892386820295938495955950208180559");
    h("8190945312078224740138359584344850334979272579850698752");
    h("532961898166280977653508257392179520475344495680946176");
    h("6686666032525758012835877869794467372221932417056768");
    h("21966742708414697221855364408191980703275957666971648");
    h("86978301789431265581589410157339178996324059508178944");
    h("87998437222994899403474133391095611506003839841896170312192");
    h("756547609698851755064889000429811016855268869799936");
    h("21303470415646480145407700487446218260595769436769674360831082496");
    h("1229579497609486457807949811603799447536468505859375");
    h("19992887656467009219497728868525584503692559335284736");
    h("179384481668337660126460295334957999676642300759375872");
    h("51338139564493216519313847444859650175406128636998189056");
    h("3783314685391895095259707874862797318283093791735808");
    h("455996467489033987898353199886457827619766272");
    h("8114593752949855681081227769780914658549183394349056");
    h("147970826084663436455350055837218290834966954615385358336");
    h("467147087677962656579323685768119790824589324894208");
    h("525297673779344498186254287708790096299250998575104");
    h("5767247996024230328139798589729873960797399072768");
    h("206187692411505938788073377077119489198538670966569");
    h("237099715792717924379216212072629349602726032843471432115997327");
    h("37095285727770768827799898376141324153367695517024256");
    h("1845889657709970437450728725755833431045748427950391296");
    h("19919187861273680616488786947981551050090789794921875");
    h("40953091196416861746062416352897042362427275768888553381888");
    h("113606187012454910951799518540547624610974692382250878631936");
    h("6759568127241067201632071353162583664352994196743927278600192");
    h("14767117261679763499605829806046667448365987423603130368");
    h("32089876989606641042807575323931254744996735366782255104");
    h("4095472656039112370069179792172425167489636289925349376");
    h("113604312541297979535137188776932805219688567520886784");
    h("193636514951824693846718736157959614579698391056384");
    h("1091055817646625795455457561013662661329889002470596673536");
    h("11915424755880565552285290921319921478631131503881213672685568");
    h("44673379805107497284826630586379910734286771492816420864");
    h("1310498918285339575873997323292705355597672824604433708220416");
    h("387705629991052771153858175903580078124667083466610323750912");
    h("766869389049467993857268667750204461304818999167152");
    h("7270795968797114300915169186595047975102380312464056232443904");
    h("1958610656103920962085423298579788497619429648851456");
    h("65439521198887935475820259648017447364677887928930304");
    h("184988702645967695423243669514427233235863533290862411776");
    h("1089594629392865787434795867960485627665531012019912704");
    h("737747698565691874684769886962279668521881103515625");
    h("229836367137557627037027253397914937085697947847950336");
    h("943878463696514179039381280227238612819877113693732864");
    h("83871930770261732855935828690733142758251060774683757326106624");
    h("7292394038983693199567590616418571508859899439");
    h("622862783570616875439098247690826387766119099858944");
    h("165606686607077129667346236939573796809001009303572709376");
    h("203459885866412225126106326776175149898079562596154867712");
    h("897740329183772705467119269123965097497773328495132672");
    h("3309139244822777576653824487879993387724946036504920064");
    h("175733941667317577774842915265535845626207661335773184");
    h("563782672661644298204967085793745598494112560971776");
    h("63396309716771713700780981328430594090945698874023927808");
    h("122092684768993087943528220600859253259697172675338043392");
    h("7534886491798889635238945647102957407558675608313");
    h("62016542834581667746444879089138809767653391747514368");
    h("166477484008803861400375985848991173770586747585861517312");
    h("5179683674087095471850822746403962530604178932144147529728");
    h("57455381067761453149895633223933766239857493023688491008");
    h("804120836491934951126879350554838393217161886870695575552");
    h("1909347680881595142047050731773909657327305754323544178688");
    h("2687213820174579559981200765651469818733857478224197632");
    h("3875574563520328955276489698996895640968801288192");
    h("45045018757124979269518176447564072732048274530571776950272");
    h("58988744466188678387513925227814806516538116483055616");
    h("378529569387604867811077113004740106992002306979594764288");
    h("8439771417383942868987037812879628552697535327627");
    h("8621898121480953063306213460666560796368615046867254181888");
    h("75176985573738778802544411452519538193783264568806276");
    h("9020522762586308771279473372699929575905800975548416");
    h("13922207339523584140830873883351769539093187426982559744");
    h("538850850367795285199594488277957277749198848");
    h("38966279201665206980552055750487952190353178659664166912");
    h("2679921750198918799490154297008587940411640703678131103515625");
    h("16752517426915311481809986469892466525357539309806157824");
    h("28825412894798898351230579781403094859210407450873310478336");
    h("139950120674050362258881597140687137383682795584318385499");
    h("14709527496803688130369744217466555973484668662268821504");
    h("2680178616048936266536331498630062327556872334569020728541184");
    h("23389509090799540490076371464230393302259495490463416188928");
    h("2445798778258899776121488526235013071652346357279096832");
    h("4057296876474927840540613884890457329274591697174528");
    h("365461079543742820157443304128599895347804617038490877952");
    h("201030209122983737781719837638709598304290471717673893888");
    h("450397076481232786737977809084423357175162616419895476224");
    h("8376258713457655740904993234946233262678769654903078912");
    h("19758925148342496764567652688613748667160716751648512");
    h("81890867840888869763062697445480794127124723037326278656");
    h("1740275917440448017603859235418971192386648428372819968");
    h("89185499559941417739669959668328919927978515625");
    h("21197655885705872597420318328265445991552129190857306800128");
    h("450563132736957408507361435825722536810017955824947850903552");
    h("1172578144521409616609645030650652268306131646373946568736768");
    h("184828891302541439360877496584345755367188626454880256");
    h("444690686956163595658452459315456922118608428596199424");
    h("1037770697319935468584758226596564809388071064567808");
    h("13611298975998069895995163505740619688895797");
    h("2813106560778809951677541179418926485026729704198208537");
    h("198691294791418188599713209742358544822343322847807488");
    h("273892744995340833777347939263771534786080723599733441");
    h("11813774014885389569630837423945406292037942926892859392");
    h("1560942527902275989587351938338076908780239168663004905472");
    h("2909039247041153699288401103837871454743928589814749431808");
    h("272398657348216446858698966990121406916382753004978176");
    h("2531962534839905997719911575978969055959833739264");
    h("31698154858385856850390490664215297045472849437011963904");
    h("92275967936387685250236777435677983372758385164288");
    h("155715695892654218859774561922706596941529774964736");
    h("36992706521165859113837513959304572708741738653846339584");
    h("1898971901129929498289933681984226791969875304448");
    h("12175177049207014179496944843026828717684509981904932881");
    h("986189340985768148539252532285173126132445308534299563361");
    h("47636185543892699877543699290102444725959447285858304");
    h("632499741568665873357998874281789839267730712890625");
    h("7544036379695568953505203942218194096619943936933888");
    h("445927497799707088698349798341644599639892578125");
    h("75899968988239904802959864913814780712127685546875");
    h("5679987442031428607891531803479130623163788727294910095489");
    h("6669559847870971896432937809895820927894196191232");
    h("6193349345826993244028786869507588969765797888");
    h("21480965678555336954887223980514990163946677107853099008");
    h("914597999963417677160460887815487867850624541677");
    h("35377404975877072377667958330597429738250948032379424");
    h("249995560292599146032596969861067078142056363187205029296");
    h("109682196741819573876783704720468155866688060335681536");
    h("25396964523123942786023203358676477588865756988525390625");
    h("2142987551662104202175321930205576869488789326159086092288");
    h("105140509828082107431554759567072563559231751448572291186688");
    h("42775217777762069821479032092766690434651234832763671875");
    h("6537567776357194724608775207762913765993186072119476224");
    h("750378090055697263857243203162404623315259397029876708984375");
    h("10998254427420332520902258678023674963940698679220786692096");
    h("478358617782233760337227454226554665804379468691668992");
    h("4963708867234166364980736731819990081587419054757380096");
    h("156271668859767297889551427946579750773989376");
    h("8777677011607978812110118626122042857426081079947616634011648");
    h("130879042397775870951640519296034894729355775857860608");
    h("34969667883289601193549524914655103888732424821214117888");
    h("1608750669897320688197077730270145454716009804663277748224");
    h("393898339037374067844141848638675090202682033186155823890432");
    h("757473886497058524891564289937654507009515781619712");
    h("380954467846859141790348050380147163832986354827880859375");
    h("3285640932127565857236086236471017611225992232767884099584");
    h("5580844960847394417930350472737584215767681598663330078125");
    h("90694186037651867988711464031850057440302066980873868687083307008");
    h("309875756647147798585278758215045446917267506849765777587890625");
    h("67791818872045479234284068722419667594793434792286110917546999808");
    h("269609965152903058555816926517742185270830995682773813491707");
    h("3542246875253175566818458598708795689497799575328826904296875");
    h("18521843332198498858331603009680386163184076976793844304383574016");
    h("393697448926474537873604769133356991724399357656706318336");
    h("1191783424830893898225557874985527713168561653789128372304858085443");
    h("3299651185874378077984917987309837454233994178592768");
    h("12798647023997587696426348556838157398240947116965888");
    h("1266389129166371209638799656012818273017646172433780952315876868096");
    h("486553365264292293867344066736759391651527845598575198208");
    h("59179656961027374256060371187570927409132674383364534835243178207");
    h("565467495787529783678473218056667681413190936258674688");
    h("66198895948970771594365992036401724618599473615176975727081298828125");
    h("2658124684601480259372319726583760894538948707639908715508588299");
    h("5414578270904589133654415763095525817331466685425305593258704896");
    h("31268867386823980484908633481797982049818424010710640797922885632");
    h("801679632258173295877451416349917959026666489589376423559168");
    h("488576052919124695076697398153093469528412875167353762467545088");
    h("6557935170808783160745838678698490804336033926989479936");
    h("170459049706378977647870309795064535539692786389701324272679");
    h("4654169075970933309296385822979475970968724995878617612288");
    h("2408480184318595658773739562897893241889615796977881");
    h("30129697276464657437459586098853185597685971018793827074465333248");
    h("334070895702593745624031855959011032696758479586809456751981");
    h("96959447151496876488078398157864828774552629673984");
    h("8499876705404180705516661684276786706994572449553683542528");
    h("97189725838481681569737584353489757742892192169459712");
    h("868743221048243188679854541001613708094899874977826732362167");
    h("2680801387759257586154718234036178159277985597626083744677888");
    h("117988475626358037759078058240905747486946976676989015764762624");
    h("11556612192943375547592663393175990315984551838862580681714818163");
    h("2426489686376127527002352338659679667437478961144964321425363");
    h("6695488283658812763879908021967374577263549115287517127658962944");
    h("237996547751317059754466527159750027795848028587503139190784");
    h("14751988480613696785379141994389693721402508977019938943827968");
    h("98457094757496668874388805369829164645966191678881792");
    h("127248290944981671976639034937761607579886913299560546875");
    h("19598506248777704188966209803684872441596517471980239318742767");
    h("765648777848984236057796540864975069305902322359937252715824939008");
    h("1374777348570344632197661958679057747723285924225553319967");
    h("1649825592937189038992458993654918727116997089296384");
    h("271167275488181916937136274889678670379173739169144443670187999232");
    h("4765869133794235708719499082730983394271974395779704434982912");
    h("13962507227912799927889157468938427912906174987635852836864");
    h("9423344339817799645060174459608775996413919242567431487488");
    h("636166735571776946714449737178507121781787597874158544879616");
    h("2736345930860376836181964381797570587269628394547009552384");
    h("17375834646173389525639899710987996307777376596766912961052672");
    h("23684907177777957723228788891809948466691265194659829");
    h("78920508845974072027378961099223498969966573656502238707712");
    h("48594862919240840784868792176744878871446096084729856");
    h("687987890772794348384542883996676889876011646976");
    h("1634693636825617874194603993673076988969424404548814887");
    h("59193993778616121687784807020883745944401569393615568896");
    h("87514969956716153696249349124873473372148759688881409024");
    h("1997088418182930322593778908026867689360592567723447569878729");
    h("6599302371748756155969835974619674908467988357185536");
    h("401154400007864525293076666488251465933515564145892804685372694389");
    h("661494404721374959226128678917156648685145606314065868013699072");
    h("241037578211717259499676688790825484781487768150350616595722665984");
    h("3575074983737626290863598934163019374876131172748258157869");
    h("65903917800036700645594703964886633748899554734873769805998057");
    h("516131654920544864699057954384185868257640174247078671679488");
    h("6496185653240447658504255861699865814922405831532946992922624");
    h("1397217029844098335281997599594966947978469947698701139968");
    h("1808013057924621803706133777735157383417426695926299555844999521");
    h("5938172376837417924948489798278609528908497277719479844864");
    h("676404170474848777436927932288615765818659499326629216256");
    h("12966329283289881895676413501752359384678865389082579767918592");
    h("2975772570515027895057736898652166478783799606794452056737316864");
    h("1876590141786726068769109168786703601239956672450826599793688576");
    h("4626864894871637422419550896903768017058487696899276537856");
    h("685296575497855169608114255284569881602384312381744384765625");
    h("205991909952397236485735423470993555399103158853979575648");
    h("39806108664582737997263618354272855532835678556082222348128818117");
    h("1158106199511999277218838277103628964808089778174468177700847616");
    h("68876968421634210664944677105076702278753186829869415661568");
    h("49266857400593195273923377950231321845638776996583496575090688");
    h("26127658919154948489956745162719548364053067950259669603674335739904");
    h("808829895458709175667450779553226555812492987048321440475121");
    h("278523959882684193358369970070381746814798150026975102321557504");
    h("90389091829393972312378758296559556793057913056381481223395999744");
    h("12372996137133101689778957628111519729509573318029979879703");
    h("19760598757387836570768733486584581882804285867823990833152");
    h("388758903353926726278950337413959030971568768677838848");
    h("56819683235459659215956769931688178513230928796567108090893");
    h("16947954718011369808571017180604916898698358698071527729386749952");
    h("5399429213248982309429865797416097652382899564969984");
    h("25193553410399052471715781689046797534752096374356975238502843");
    h("322891988988175769863035687787778480770811589278911898517504");
    h("3839895352903376386483124781138057847089177926285166169563");
    h("434289824816999728957064353913860861803033666815425566637817856");
    h("447361931863377931869297983382988774052345918397562291712");
    h("81429342153187449179449566358848911588068812527892293744590848");
    h("1074764933943733925926117695565367099386563321014220003399478089159");
    h("387847422997577775774698818581622997580727082989884801024");
    h("2191839146704717565039273006947071385523432384569056845749747341");
    h("1619961644945478538471400586608014993217643776269754807877632");
    h("21597716852995929237719463189664390609531598259879936");
    h("129467985754951523806286987039617861426227794792987623424");
    h("180778183658787944624757516593119113586115826112762962446791999488");
    #undef h
}

}   

char buf[1100];
char buf2[1100];

void TDD(char* from,char* to){
    int cnt = 0;
    for (;*from;++from,++to){
        if (cnt >= 3)
           *to = '0';
        else {
           *to = *from;
           cnt += (*from != '0'); 
        }
    }
    *to = 0;
}
 
void TDUFD(char* from,char* to){                                   
    if (from[0] == '9' && ((from[1] == '9' && (from[2] == '9' || from[2] == 0)) || from[1] == 0)){
        int l = strlen(from);
        to[0] = '1';
        for (int i = 1; i <= l; i++)
            to[i] = '0';
        to[l+1] = 0;
        return;
    }
    int cnt = 0;
    for (int i = 0; to[i]; i++){
        if (to[i] != '0')
            cnt++;
        if (cnt == 3){
            to[i]++;
            if (to[i] == '0'+10){
                to[i] = '0';
                to[i-1]++;
                if (to[i-1] == '0'+10){
                    to[i-2]++;
                    to[i-1] = '0';
                }
            }
            return;
        }
    }

    int l = strlen(to);
    to[l-1]++;
    if (to[l-1] == '0'+10){
        to[l-1] = '0';
        to[l-2]++;
        if (to[l-2] == '0'+10){
            to[l-2] = '0';
            to[l-3]++;
        }
    }
    to[l] = 0;
}

void TDU(char* from,char* to){                 
    TDD(from,to);
    TDUFD(from,to);
}


void solve(){
    gets(buf);
    int l = strlen(buf);
    if (l > 70){
        TDD(buf,buf2);
        print(buf2);
        print(" ");
        TDUFD(buf,buf2);
        print(buf2);
        print("\n");
        return;
    }

    tlong me,ans;
    me.init(buf);
    TDD(buf,buf2);
    ans.init(buf2);

    int id = upper_bound(have.begin(),have.end(),me)-have.begin()-1;
    if (id != -1 && ans < have[id])
        have[id].print();
    else 
        ans.print();
    print(" ");
    id++;
    TDUFD(buf,buf2);
    ans.init(buf2);

    if (id != (int)have.size() && have[id] < ans)
        have[id].print();
    else  
        ans.print();
    print("\n");
}


int main(){
  #ifdef LOCAL
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
  #endif

  Precalc::Precalc();
  sort(have.begin(),have.end());
  have.erase(unique(have.begin(),have.end()),have.end());

                    
  #ifdef LOCAL
    cerr << "Time: "<<(clock()-START)/CLOCKS_PER_SEC << endl;
  #endif

  /*for (int i = 0; i < (int)have.size(); i++)
    have[i].print(),print("\n"); */
  

  gets(buf2);
  int t;
  sscanf(buf2,"%d",&t);
  while (t-->0){
    solve();
  }      
  if (ptrout != 0){
     outbuf[--ptrout] = 0;
     puts(outbuf); 
  }    
              
  #ifdef LOCAL
    cerr << "Time: "<<(clock()-START)/CLOCKS_PER_SEC << endl;
  #endif
  return 0;
}
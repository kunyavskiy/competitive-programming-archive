//#include <iostream>
#include <fstream>
#include <vector>
#include <set>
#include <map>
#include <cstring>
#include <string>
#include <cmath>
#include <cassert>
#include <ctime>
#include <algorithm>
#include <sstream>
#include <list>
#include <queue>
#include <deque>
#include <stack>
#include <cstdlib>
#include <cstdio>
#include <iterator>
#include <functional>
#include <bitset>
#define mp make_pair
#define pb push_back

#ifdef LOCAL
#define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
#define eprintf(...)
#endif

#define TIMESTAMP(x) eprintf("["#x"] Time : %.3lf s.\n", clock()*1.0/CLOCKS_PER_SEC)
#define TIMESTAMPf(x,...) eprintf("[" x "] Time : %.3lf s.\n", __VA_ARGS__, clock()*1.0/CLOCKS_PER_SEC)

#if ( _WIN32 || __WIN32__ )
    #define LLD "%I64d"
#else
    #define LLD "%lld"
#endif

using namespace std;

#define TASKNAME "F"

typedef long long ll;
typedef long double ld;

const int MAXN = 500;
const int MAXM = 50;

#ifdef PRECALC
double dp[2][MAXN+1][MAXM+1][MAXM+1];

double ans[MAXN];
#else

const double ans[501] = {0.0000000000,
1.5000000000,2.2500000000,2.7500000000,3.4375000000,3.9375000000,4.4531250000,4.9296875000,5.4023437500,5.8671875000,6.3261718750,6.7895507813,7.2546386719,7.7220458984,8.1926269531,8.6665954590,9.1434173584,9.6230773926,10.1053504944,10.5899448395,11.0765981674,
11.5650944710,12.0552108288,12.5467423201,13.0395042300,13.5333331227,14.0280836374,14.5236275718,15.0198520496,15.5166588053,16.0139625734,16.5116895931,17.0097762269,17.5081677926,18.0068174487,18.5056851760,19.0047368592,19.5039434822,20.0032804181,20.5027268077,21.0022650142,
21.5018801508,22.0015596716,22.5012930193,23.0010713221,23.5008871346,24.0007342162,24.5006073422,25.0005021430,25.5004149681,26.0003427708,26.5002830106,27.0002335711,27.5001926904,28.0001589031,28.5001309913,29.0001079435,29.5000889202,30.0000732251,30.5000602809,31.0000496095,
31.5000408150,32.0000335699,32.5000276032,33.0000226909,33.5000186479,34.0000153215,34.5000125854,35.0000103354,35.5000084857,36.0000069656,36.5000057165,37.0000046904,37.5000038478,38.0000031559,38.5000025879,39.0000021217,39.5000017392,40.0000014255,40.5000011681,41.0000009570,
41.5000007840,42.0000006421,42.5000005258,43.0000004306,43.5000003525,44.0000002885,44.5000002361,45.0000001932,45.5000001581,46.0000001294,46.5000001058,47.0000000866,47.5000000708,48.0000000579,48.5000000473,49.0000000387,49.5000000316,50.0000000258,50.5000000211,51.0000000173,
51.5000000141,52.0000000115,52.5000000094,53.0000000077,53.5000000063,54.0000000051,54.5000000042,55.0000000034,55.5000000028,56.0000000023,56.5000000019,57.0000000015,57.5000000012,58.0000000010,58.5000000008,59.0000000007,59.5000000005,60.0000000004,60.5000000004,61.0000000003,
61.5000000002,62.0000000002,62.5000000002,63.0000000001,63.5000000001,64.0000000001,64.5000000001,65.0000000000,65.5000000000,66.0000000000,66.5000000000,67.0000000000,67.5000000000,68.0000000000,68.5000000000,69.0000000000,69.5000000000,70.0000000000,70.5000000000,71.0000000000,
71.5000000000,72.0000000000,72.5000000000,73.0000000000,73.5000000000,74.0000000000,74.5000000000,75.0000000000,75.5000000000,76.0000000000,76.5000000000,77.0000000000,77.5000000000,78.0000000000,78.5000000000,79.0000000000,79.5000000000,80.0000000000,80.5000000000,81.0000000000,
81.5000000000,82.0000000000,82.5000000000,83.0000000000,83.5000000000,84.0000000000,84.5000000000,85.0000000000,85.5000000000,86.0000000000,86.5000000000,87.0000000000,87.5000000000,88.0000000000,88.5000000000,89.0000000000,89.5000000000,90.0000000000,90.5000000000,91.0000000000,
91.5000000000,92.0000000000,92.5000000000,93.0000000000,93.5000000000,94.0000000000,94.5000000000,95.0000000000,95.5000000000,96.0000000000,96.5000000000,97.0000000000,97.5000000000,98.0000000000,98.5000000000,99.0000000000,99.5000000000,100.0000000000,100.5000000000,101.0000000000,
101.5000000000,102.0000000000,102.5000000000,103.0000000000,103.5000000000,104.0000000000,104.5000000000,105.0000000000,105.5000000000,106.0000000000,106.5000000000,107.0000000000,107.5000000000,108.0000000000,108.5000000000,109.0000000000,109.5000000000,110.0000000000,110.5000000000,111.0000000000,
111.5000000000,112.0000000000,112.5000000000,113.0000000000,113.5000000000,114.0000000000,114.5000000000,115.0000000000,115.5000000000,116.0000000000,116.5000000000,117.0000000000,117.5000000000,118.0000000000,118.5000000000,119.0000000000,119.5000000000,120.0000000000,120.5000000000,121.0000000000,
121.5000000000,122.0000000000,122.5000000000,123.0000000000,123.5000000000,124.0000000000,124.5000000000,125.0000000000,125.5000000000,126.0000000000,126.5000000000,127.0000000000,127.5000000000,128.0000000000,128.5000000000,129.0000000000,129.4999999999,129.9999999999,130.4999999999,130.9999999999,
131.4999999999,131.9999999999,132.4999999999,132.9999999999,133.4999999999,133.9999999999,134.4999999999,134.9999999999,135.4999999999,135.9999999999,136.4999999999,136.9999999999,137.4999999999,137.9999999999,138.4999999999,138.9999999999,139.4999999999,139.9999999999,140.4999999999,140.9999999999,
141.4999999999,141.9999999999,142.4999999999,142.9999999999,143.4999999999,143.9999999999,144.4999999999,144.9999999999,145.4999999999,145.9999999999,146.4999999999,146.9999999999,147.4999999999,147.9999999999,148.4999999999,148.9999999999,149.4999999999,149.9999999999,150.4999999999,150.9999999999,
151.4999999999,151.9999999999,152.4999999999,152.9999999999,153.4999999999,153.9999999999,154.4999999999,154.9999999999,155.4999999999,155.9999999999,156.4999999999,156.9999999999,157.4999999999,157.9999999999,158.4999999999,158.9999999999,159.4999999999,159.9999999999,160.4999999999,160.9999999999,
161.4999999999,161.9999999999,162.4999999999,162.9999999999,163.4999999999,163.9999999999,164.4999999999,164.9999999999,165.4999999999,165.9999999999,166.4999999999,166.9999999999,167.4999999999,167.9999999999,168.4999999999,168.9999999999,169.4999999999,169.9999999999,170.4999999999,170.9999999999,
171.4999999999,171.9999999999,172.4999999999,172.9999999999,173.4999999999,173.9999999999,174.4999999999,174.9999999999,175.4999999999,175.9999999999,176.4999999999,176.9999999999,177.4999999999,177.9999999999,178.4999999999,178.9999999999,179.4999999999,179.9999999999,180.4999999999,180.9999999999,
181.4999999999,181.9999999999,182.4999999999,182.9999999999,183.4999999999,183.9999999999,184.4999999999,184.9999999999,185.4999999999,185.9999999999,186.4999999999,186.9999999999,187.4999999999,187.9999999999,188.4999999999,188.9999999999,189.4999999999,189.9999999999,190.4999999999,190.9999999999,
191.4999999999,191.9999999999,192.4999999999,192.9999999999,193.4999999999,193.9999999999,194.4999999999,194.9999999999,195.4999999999,195.9999999999,196.4999999999,196.9999999999,197.4999999999,197.9999999999,198.4999999999,198.9999999999,199.4999999999,199.9999999999,200.4999999999,200.9999999999,
201.4999999999,201.9999999999,202.4999999999,202.9999999999,203.4999999999,203.9999999999,204.4999999999,204.9999999999,205.4999999999,205.9999999999,206.4999999999,206.9999999999,207.4999999999,207.9999999999,208.4999999999,208.9999999999,209.4999999999,209.9999999999,210.4999999999,210.9999999999,
211.4999999999,211.9999999999,212.4999999999,212.9999999999,213.4999999999,213.9999999999,214.4999999999,214.9999999999,215.4999999999,215.9999999999,216.4999999999,216.9999999999,217.4999999999,217.9999999999,218.4999999999,218.9999999999,219.4999999999,219.9999999999,220.4999999999,220.9999999999,
221.4999999999,221.9999999999,222.4999999999,222.9999999999,223.4999999999,223.9999999999,224.4999999999,224.9999999999,225.4999999999,225.9999999999,226.4999999999,226.9999999999,227.4999999999,227.9999999999,228.4999999999,228.9999999999,229.4999999999,229.9999999999,230.4999999999,230.9999999999,
231.4999999999,231.9999999999,232.4999999999,232.9999999999,233.4999999999,233.9999999999,234.4999999999,234.9999999999,235.4999999999,235.9999999999,236.4999999999,236.9999999999,237.4999999999,237.9999999999,238.4999999999,238.9999999999,239.4999999999,239.9999999999,240.4999999999,240.9999999999,
241.4999999999,241.9999999999,242.4999999999,242.9999999999,243.4999999999,243.9999999999,244.4999999999,244.9999999999,245.4999999999,245.9999999999,246.4999999999,246.9999999999,247.4999999999,247.9999999999,248.4999999999,248.9999999999,249.4999999999,249.9999999999,250.4999999999,250.9999999999};

#endif


int main(){
  #ifdef LOCAL
    freopen(TASKNAME".in","r",stdin);
    freopen(TASKNAME".out","w",stdout);
  #endif

  #ifdef PRECALC
  	dp[0][0][0][0] = 1.0;
  	for (int n = 1; n < MAXN; n++){
  		eprintf("%d\n",n);
		for (int i = n; i < MAXN; i++)
			for (int cnt = 0; cnt <= n; cnt++)
				for (int j = 0; j <= n && j < MAXM; j++)
					for (int k = 0; k <= n && k < MAXM; k++){
						ans[i] += pow(0.5,i-n+1) * (max(1 + n - cnt, max(k, j + (i-n)))) * dp[0][cnt][k][j];
					}

  		for (int cnt = 0; cnt <=n; cnt++)
  			for (int maxk = 0; maxk <= cnt && maxk < MAXM; maxk++)
  				for (int k = 0; k <= cnt && k < MAXM; k++){
  					dp[1][cnt][maxk][0] += dp[0][cnt][maxk][k] * 0.5;
  					if (k < MAXM - 1)
	  					dp[1][cnt+1][max(maxk,k+1)][k+1] += dp[0][cnt][maxk][k] * 0.5;
				}
		memcpy(dp[0],dp[1],sizeof(dp[0]));
		memset(dp[1],0,sizeof(dp[1]));
	}

	printf("const double ans[%d] = {",MAXN);
	for (int i = 0; i < MAXN; i++){
		printf("%.10lf%c",ans[i]  + i * pow(0.5,i),",}"[i==MAXN-1]);
		if (i % 20 == 0)
			printf("\n");
	}
	printf("\n");
#endif	

	int n;
	scanf("%d",&n);

	for (int i = 0; i < n; i++){
		int a;
		scanf("%d",&a);
		printf("%.10lf\n",ans[a]);
	}

      
  TIMESTAMP(end);
  return 0;
}